from _typeshed import Incomplete

__all__ = ["system_info"]

class system_info:
    search_static_first: int
    section: str
    def __init__(self, default_lib_dirs: list[str] = ..., default_include_dirs: list[str] = ...) -> None: ...
    def parse_config_files(self) -> None: ...
    def calc_libraries_info(self) -> None: ...
    def calc_extra_info(self) -> None: ...
    def get_option_single(self, *options: object) -> None: ...
    def has_info(self) -> bool: ...
    def get_info(self, notfound_action: int = 0) -> dict[str, Incomplete]: ...
    def set_info(self, **info: Incomplete) -> None: ...
    def get_paths(self, section: Incomplete, key: str) -> Incomplete: ...
    def get_lib_dirs(self, key: str = "library_dirs") -> Incomplete: ...
    def get_runtime_lib_dirs(self, key: str = "runtime_library_dirs") -> Incomplete: ...
    def get_include_dirs(self, key: str = "include_dirs") -> Incomplete: ...
    def get_src_dirs(self, key: str = "src_dirs") -> Incomplete: ...
    def get_libs(self, key: str, default: Incomplete) -> Incomplete: ...
    def get_libraries(self, key: str = "libraries") -> Incomplete: ...
    def library_extensions(self) -> Incomplete: ...
    def check_libs(self, lib_dirs: Incomplete, libs: Incomplete, opt_libs: list[Incomplete] = []) -> Incomplete: ...
    def check_libs2(self, lib_dirs: Incomplete, libs: Incomplete, opt_libs: list[Incomplete] = []) -> Incomplete: ...
    def combine_paths(self, *args: Incomplete) -> Incomplete: ...
