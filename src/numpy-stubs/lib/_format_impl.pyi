from _typeshed import Incomplete
from typing import Final, Literal

__all__: list[str] = []

EXPECTED_KEYS: Final[set[str]]
MAGIC_PREFIX: Final[bytes]
MAGIC_LEN: Literal[8]
ARRAY_ALIGN: Literal[64]
BUFFER_SIZE: Literal[262144]  # 2**18
GROWTH_AXIS_MAX_DIGITS: Literal[21]

def magic(major: Incomplete, minor: Incomplete) -> Incomplete: ...
def read_magic(fp: Incomplete) -> Incomplete: ...
def dtype_to_descr(dtype: Incomplete) -> Incomplete: ...
def descr_to_dtype(descr: Incomplete) -> Incomplete: ...
def header_data_from_array_1_0(array: Incomplete) -> Incomplete: ...
def write_array_header_1_0(fp: Incomplete, d: Incomplete) -> Incomplete: ...
def write_array_header_2_0(fp: Incomplete, d: Incomplete) -> Incomplete: ...
def read_array_header_1_0(fp: Incomplete) -> Incomplete: ...
def read_array_header_2_0(fp: Incomplete) -> Incomplete: ...
def write_array(
    fp: Incomplete,
    array: Incomplete,
    version: Incomplete = ...,
    allow_pickle: Incomplete = ...,
    pickle_kwargs: Incomplete = ...,
) -> Incomplete: ...
def read_array(fp: Incomplete, allow_pickle: Incomplete = ..., pickle_kwargs: Incomplete = ...) -> Incomplete: ...
def open_memmap(
    filename: Incomplete,
    mode: Incomplete = ...,
    dtype: Incomplete = ...,
    shape: Incomplete = ...,
    fortran_order: Incomplete = ...,
    version: Incomplete = ...,
) -> Incomplete: ...
def isfileobj(f: Incomplete) -> Incomplete: ...
