from _typeshed import SupportsLenAndGetItem
from collections.abc import Iterable, Sequence
from typing import Any, TypeAlias, overload
from typing_extensions import TypeVar

import _numtype as _nt
import numpy as np
from numpy._typing import _FloatLike_co

__all__ = ["as_series", "format_float", "getdomain", "mapdomain", "mapparms", "trimcoef", "trimseq"]

###

_T = TypeVar("_T")
_T_seq = TypeVar(
    "_T_seq", bound=_nt.Array[_nt.co_complex | np.object_] | SupportsLenAndGetItem[_nt.co_complex | np.object_]
)

_Tuple2: TypeAlias = tuple[_T, _T]

_Real: TypeAlias = np.integer | np.floating

_CoFloating_01d: TypeAlias = _nt.CoFloating_0d | _nt.CoFloating_1d
_ToComplex_01d: TypeAlias = _nt.ToComplex_0d | _nt.ToComplex_1d
_ToObject_01d: TypeAlias = _nt.ToObject_0d | _nt.ToObject_1d

_CoNumeric_0d: TypeAlias = _nt.CoComplex_0d | _nt.ToObject_0d
_CoNumeric_1d: TypeAlias = _nt.CoComplex_1d | _nt.ToObject_1d

###

#
def trimseq(seq: _T_seq) -> _T_seq: ...

#
@overload
def as_series(alist: _nt.Array[_Real], trim: bool = True) -> list[_nt.Array1D[np.floating]]: ...
@overload
def as_series(alist: _nt.Array[np.complexfloating], trim: bool = True) -> list[_nt.Array1D[np.complexfloating]]: ...
@overload
def as_series(alist: _nt.Array[np.object_], trim: bool = True) -> list[_nt.Array1D[np.object_]]: ...
@overload
def as_series(alist: Iterable[_CoFloating_01d], trim: bool = True) -> list[_nt.Array1D[np.floating]]: ...
@overload
def as_series(alist: Iterable[_ToComplex_01d], trim: bool = True) -> list[_nt.Array1D[np.complexfloating]]: ...
@overload
def as_series(alist: Iterable[_ToObject_01d], trim: bool = True) -> list[_nt.Array1D[np.object_]]: ...

#
@overload
def trimcoef(c: _CoFloating_01d, tol: _FloatLike_co = 0) -> _nt.Array1D[np.floating]: ...
@overload
def trimcoef(c: _ToComplex_01d, tol: _FloatLike_co = 0) -> _nt.Array1D[np.complexfloating]: ...
@overload
def trimcoef(c: _ToObject_01d, tol: _FloatLike_co = 0) -> _nt.Array1D[np.object_]: ...

#
@overload
def getdomain(x: _CoFloating_01d) -> _nt.Array1D[np.float64]: ...
@overload
def getdomain(x: _ToComplex_01d) -> _nt.Array1D[np.complex128]: ...
@overload
def getdomain(x: _ToObject_01d) -> _nt.Array1D[np.object_]: ...

#
@overload
def mapparms(old: Sequence[float], new: Sequence[float]) -> _Tuple2[float]: ...
@overload
def mapparms(old: Sequence[complex], new: Sequence[complex]) -> _Tuple2[complex]: ...
@overload
def mapparms(old: _nt._ToArray_1d[_Real], new: _nt.CoFloating_1d) -> _Tuple2[np.floating]: ...
@overload
def mapparms(old: _nt.CoFloating_1d, new: _nt._ToArray_1d[_Real]) -> _Tuple2[np.floating]: ...
@overload
def mapparms(old: _nt._ToArray_1d[np.complexfloating], new: _nt.CoComplex_1d) -> _Tuple2[np.complexfloating]: ...
@overload
def mapparms(old: _nt.CoComplex_1d, new: _nt._ToArray_1d[np.complexfloating]) -> _Tuple2[np.complexfloating]: ...
@overload
def mapparms(old: _CoNumeric_1d, new: _CoNumeric_1d) -> _Tuple2[Any]: ...

#
@overload
def mapdomain(x: _nt.CoFloating_0d, old: _nt.CoFloating_1d, new: _nt.CoFloating_1d) -> np.floating: ...
@overload
def mapdomain(x: _nt.ToComplex_0d, old: _nt.CoComplex_1d, new: _nt.CoComplex_1d) -> np.complexfloating: ...
@overload
def mapdomain(x: _nt.CoComplex_0d, old: _nt.ToComplex_1d, new: _nt.CoComplex_1d) -> np.complexfloating: ...
@overload
def mapdomain(x: _nt.CoComplex_0d, old: _nt.CoComplex_1d, new: _nt.ToComplex_1d) -> np.complexfloating: ...
@overload
def mapdomain(x: _nt.CoFloating_1d, old: _nt.CoFloating_1d, new: _nt.CoFloating_1d) -> _nt.Array1D[np.floating]: ...
@overload
def mapdomain(x: _nt.ToComplex_1d, old: _nt.CoComplex_1d, new: _nt.CoComplex_1d) -> _nt.Array1D[np.complexfloating]: ...
@overload
def mapdomain(x: _nt.CoComplex_1d, old: _nt.ToComplex_1d, new: _nt.CoComplex_1d) -> _nt.Array1D[np.complexfloating]: ...
@overload
def mapdomain(x: _nt.CoComplex_1d, old: _nt.CoComplex_1d, new: _nt.ToComplex_1d) -> _nt.Array1D[np.complexfloating]: ...
@overload
def mapdomain(x: _nt.ToObject_0d, old: _CoNumeric_1d, new: _CoNumeric_1d) -> Any: ...
@overload
def mapdomain(x: _CoNumeric_0d, old: _nt.ToObject_1d, new: _CoNumeric_1d) -> Any: ...
@overload
def mapdomain(x: _CoNumeric_0d, old: _CoNumeric_1d, new: _nt.ToObject_1d) -> Any: ...
@overload
def mapdomain(x: _nt.ToObject_1d, old: _CoNumeric_1d, new: _CoNumeric_1d) -> _nt.Array1D[np.object_]: ...
@overload
def mapdomain(x: _CoNumeric_1d, old: _nt.ToObject_1d, new: _CoNumeric_1d) -> _nt.Array1D[np.object_]: ...
@overload
def mapdomain(x: _CoNumeric_1d, old: _CoNumeric_1d, new: _nt.ToObject_1d) -> _nt.Array1D[np.object_]: ...

#
def format_float(x: _FloatLike_co, parens: bool = False) -> str: ...
