from collections.abc import Sequence
from typing import Any, Final, Literal as L, Protocol, SupportsIndex as _Index, TypeAlias, overload, type_check_only
from typing_extensions import Self, TypeVar, override

import _numtype as _nt
import numpy as np

from ._polybase import ABCPolyBase
from .polyutils import trimcoef as polytrim

__all__ = [
    "Polynomial",
    "polyadd",
    "polycompanion",
    "polyder",
    "polydiv",
    "polydomain",
    "polyfit",
    "polyfromroots",
    "polygrid2d",
    "polygrid3d",
    "polyint",
    "polyline",
    "polymul",
    "polymulx",
    "polyone",
    "polypow",
    "polyroots",
    "polysub",
    "polytrim",
    "polyval",
    "polyval2d",
    "polyval3d",
    "polyvalfromroots",
    "polyvander",
    "polyvander2d",
    "polyvander3d",
    "polyx",
    "polyzero",
]

###

_ScalarT = TypeVar("_ScalarT", bound=np.generic)

_Indices: TypeAlias = Sequence[_Index]
_ArrayAndFitResult: TypeAlias = tuple[_nt.Array[_ScalarT], Sequence[np.inexact | np.int32]]

_ToNumeric_0d: TypeAlias = _nt.ToComplex_0d | _nt.ToObject_0d | _SupportsCoefOps
_ToNumeric_1d: TypeAlias = _nt._ToArray2_1d[np.number | np.bool | np.object_, complex | _SupportsCoefOps]
_ToNumeric_nd: TypeAlias = _nt._ToArray2_nd[np.number | np.bool | np.object_, complex | _SupportsCoefOps]

_i64_1d: TypeAlias = _nt.Array1D[np.int64]
_f64_1d: TypeAlias = _nt.Array1D[np.float64]
_c128_1d: TypeAlias = _nt.Array1D[np.complex128]
_float_1d: TypeAlias = _nt.Array1D[np.floating]
_complex_1d: TypeAlias = _nt.Array1D[np.complexfloating]
_inexact_1d: TypeAlias = _nt.Array1D[np.inexact]
_object_1d: TypeAlias = _nt.Array1D[np.object_]

_f64_nd: TypeAlias = _nt.Array[np.float64]
_c128_nd: TypeAlias = _nt.Array[np.complex128]
_object_nd: TypeAlias = _nt.Array[np.object_]
_floating_nd: TypeAlias = _nt.Array[np.floating]
_complex_nd: TypeAlias = _nt.Array[np.complexfloating]
_inexact_nd: TypeAlias = _nt.Array[np.inexact]

# compatible with e.g. int, float, complex, Decimal, Fraction, and ABCPolyBase
@type_check_only
class _SupportsCoefOps(Protocol):
    @override
    def __eq__(self, x: object, /) -> bool: ...
    @override
    def __ne__(self, x: object, /) -> bool: ...
    def __neg__(self, /) -> Self: ...
    def __pos__(self, /) -> Self: ...
    def __add__(self, x: Any, /) -> Self: ...
    def __sub__(self, x: Any, /) -> Self: ...
    def __mul__(self, x: Any, /) -> Self: ...
    def __pow__(self, x: Any, /) -> Self | float: ...
    def __radd__(self, x: Any, /) -> Self: ...
    def __rsub__(self, x: Any, /) -> Self: ...
    def __rmul__(self, x: Any, /) -> Self: ...

###

polydomain: Final[_f64_1d] = ...
polyzero: Final[_i64_1d] = ...
polyone: Final[_i64_1d] = ...
polyx: Final[_i64_1d] = ...

###

class Polynomial(ABCPolyBase):
    domain: _f64_1d = ...  # pyright: ignore[reportIncompatibleMethodOverride]
    window: _f64_1d = ...  # pyright: ignore[reportIncompatibleMethodOverride]
    basis_name: None = None  # pyright: ignore[reportIncompatibleMethodOverride]

###

#
@overload
def polyline(off: _nt.ToInt_0d, scl: _nt.CoInt64_0d) -> _i64_1d: ...
@overload
def polyline(off: _nt.CoInt64_0d, scl: _nt.ToInt_0d) -> _i64_1d: ...
@overload
def polyline(off: _nt.CoInteger_0d, scl: _nt.CoInteger_0d) -> _nt.Array1D[np.integer]: ...
@overload
def polyline(off: _nt.ToFloat64_0d, scl: _nt.CoFloat64_0d) -> _f64_1d: ...
@overload
def polyline(off: _nt.CoFloat64_0d, scl: _nt.ToFloat64_0d) -> _f64_1d: ...
@overload
def polyline(off: _nt.ToFloating_0d, scl: _nt.CoFloating_0d) -> _float_1d: ...
@overload
def polyline(off: _nt.CoFloating_0d, scl: _nt.ToFloating_0d) -> _float_1d: ...
@overload
def polyline(off: _nt.ToComplex128_0d, scl: _nt.CoComplex128_0d) -> _c128_1d: ...
@overload
def polyline(off: _nt.CoComplex128_0d, scl: _nt.ToComplex128_0d) -> _c128_1d: ...
@overload
def polyline(off: _nt.ToComplex_0d, scl: _nt.CoComplex_0d) -> _complex_1d: ...
@overload
def polyline(off: _nt.CoComplex_0d, scl: _nt.ToComplex_0d) -> _complex_1d: ...
@overload
def polyline(off: _nt.CoComplex_0d, scl: _nt.CoComplex_0d) -> _nt.Array1D[np.number]: ...
@overload
def polyline(off: _nt.ToObject_0d, scl: _nt.ToObject_0d) -> _object_1d: ...

#
@overload
def polyfromroots(roots: _nt.ToFloat64_1d | _nt.CoInteger_1d) -> _f64_1d: ...
@overload
def polyfromroots(roots: _nt.CoFloating_1d) -> _float_1d: ...
@overload
def polyfromroots(roots: _nt.ToComplex128_1d) -> _c128_1d: ...
@overload
def polyfromroots(roots: _nt.ToComplex_1d) -> _complex_1d: ...
@overload
def polyfromroots(roots: _nt.CoComplex_1d) -> _inexact_1d: ...
@overload
def polyfromroots(roots: _nt.ToObject_1d) -> _object_1d: ...

#
@overload
def polyadd(c1: _nt.CoInteger_1d, c2: _nt.CoInteger_1d) -> _f64_1d: ...
@overload
def polyadd(c1: _nt.ToFloat64_1d, c2: _nt.CoFloat64_1d) -> _f64_1d: ...
@overload
def polyadd(c1: _nt.CoFloat64_1d, c2: _nt.ToFloat64_1d) -> _f64_1d: ...
@overload
def polyadd(c1: _nt.ToReal_1d, c2: _nt.CoFloating_1d) -> _float_1d: ...
@overload
def polyadd(c1: _nt.CoFloating_1d, c2: _nt.ToReal_1d) -> _float_1d: ...
@overload
def polyadd(c1: _nt.ToComplex128_1d, c2: _nt.CoComplex128_1d) -> _c128_1d: ...
@overload
def polyadd(c1: _nt.CoComplex128_1d, c2: _nt.ToComplex128_1d) -> _c128_1d: ...
@overload
def polyadd(c1: _nt.ToComplex_1d, c2: _nt.CoComplex_1d) -> _complex_1d: ...
@overload
def polyadd(c1: _nt.CoComplex_1d, c2: _nt.ToComplex_1d) -> _complex_1d: ...
@overload
def polyadd(c1: _nt.ToObject_1d, c2: _ToNumeric_1d) -> _object_1d: ...
@overload
def polyadd(c1: _ToNumeric_1d, c2: _nt.ToObject_1d) -> _object_1d: ...

#
@overload
def polysub(c1: _nt.CoInteger_1d, c2: _nt.CoInteger_1d) -> _f64_1d: ...
@overload
def polysub(c1: _nt.ToFloat64_1d, c2: _nt.CoFloat64_1d) -> _f64_1d: ...
@overload
def polysub(c1: _nt.CoFloat64_1d, c2: _nt.ToFloat64_1d) -> _f64_1d: ...
@overload
def polysub(c1: _nt.ToReal_1d, c2: _nt.CoFloating_1d) -> _float_1d: ...
@overload
def polysub(c1: _nt.CoFloating_1d, c2: _nt.ToReal_1d) -> _float_1d: ...
@overload
def polysub(c1: _nt.ToComplex128_1d, c2: _nt.CoComplex128_1d) -> _c128_1d: ...
@overload
def polysub(c1: _nt.CoComplex128_1d, c2: _nt.ToComplex128_1d) -> _c128_1d: ...
@overload
def polysub(c1: _nt.ToComplex_1d, c2: _nt.CoComplex_1d) -> _complex_1d: ...
@overload
def polysub(c1: _nt.CoComplex_1d, c2: _nt.ToComplex_1d) -> _complex_1d: ...
@overload
def polysub(c1: _nt.ToObject_1d, c2: _ToNumeric_1d) -> _object_1d: ...
@overload
def polysub(c1: _ToNumeric_1d, c2: _nt.ToObject_1d) -> _object_1d: ...

#
@overload
def polymulx(c: _nt.ToFloat64_1d | _nt.CoInteger_1d) -> _f64_1d: ...
@overload
def polymulx(c: _nt.CoFloating_1d) -> _float_1d: ...
@overload
def polymulx(c: _nt.ToComplex128_1d) -> _c128_1d: ...
@overload
def polymulx(c: _nt.ToComplex_1d) -> _complex_1d: ...
@overload
def polymulx(c: _nt.CoComplex_1d) -> _inexact_1d: ...
@overload
def polymulx(c: _nt.ToObject_1d) -> _object_1d: ...

#
@overload
def polymul(c1: _nt.CoInteger_1d, c2: _nt.CoInteger_1d) -> _f64_1d: ...
@overload
def polymul(c1: _nt.ToFloat64_1d, c2: _nt.CoFloat64_1d) -> _f64_1d: ...
@overload
def polymul(c1: _nt.CoFloat64_1d, c2: _nt.ToFloat64_1d) -> _f64_1d: ...
@overload
def polymul(c1: _nt.ToReal_1d, c2: _nt.CoFloating_1d) -> _float_1d: ...
@overload
def polymul(c1: _nt.CoFloating_1d, c2: _nt.ToReal_1d) -> _float_1d: ...
@overload
def polymul(c1: _nt.ToComplex128_1d, c2: _nt.CoComplex128_1d) -> _c128_1d: ...
@overload
def polymul(c1: _nt.CoComplex128_1d, c2: _nt.ToComplex128_1d) -> _c128_1d: ...
@overload
def polymul(c1: _nt.ToComplex_1d, c2: _nt.CoComplex_1d) -> _complex_1d: ...
@overload
def polymul(c1: _nt.CoComplex_1d, c2: _nt.ToComplex_1d) -> _complex_1d: ...
@overload
def polymul(c1: _nt.ToObject_1d, c2: _ToNumeric_1d) -> _object_1d: ...
@overload
def polymul(c1: _ToNumeric_1d, c2: _nt.ToObject_1d) -> _object_1d: ...

#
@overload
def polydiv(c1: _nt.CoInteger_1d, c2: _nt.CoInteger_1d) -> _f64_1d: ...
@overload
def polydiv(c1: _nt.ToFloat64_1d, c2: _nt.CoFloat64_1d) -> _f64_1d: ...
@overload
def polydiv(c1: _nt.CoFloat64_1d, c2: _nt.ToFloat64_1d) -> _f64_1d: ...
@overload
def polydiv(c1: _nt.ToReal_1d, c2: _nt.CoFloating_1d) -> _float_1d: ...
@overload
def polydiv(c1: _nt.CoFloating_1d, c2: _nt.ToReal_1d) -> _float_1d: ...
@overload
def polydiv(c1: _nt.ToComplex128_1d, c2: _nt.CoComplex128_1d) -> _c128_1d: ...
@overload
def polydiv(c1: _nt.CoComplex128_1d, c2: _nt.ToComplex128_1d) -> _c128_1d: ...
@overload
def polydiv(c1: _nt.ToComplex_1d, c2: _nt.CoComplex_1d) -> _complex_1d: ...
@overload
def polydiv(c1: _nt.CoComplex_1d, c2: _nt.ToComplex_1d) -> _complex_1d: ...
@overload
def polydiv(c1: _nt.ToObject_1d, c2: _ToNumeric_1d) -> _object_1d: ...
@overload
def polydiv(c1: _ToNumeric_1d, c2: _nt.ToObject_1d) -> _object_1d: ...

#
@overload
def polypow(c: _nt.CoInteger_nd, pow: _nt.CoInteger_0d, maxpower: _nt.CoInteger_0d | None = None) -> _f64_1d: ...
@overload
def polypow(c: _nt.ToFloat64_1d, pow: _nt.CoInteger_0d, maxpower: _nt.CoInteger_0d | None = None) -> _f64_1d: ...
@overload
def polypow(c: _nt.CoFloating_1d, pow: _nt.CoInteger_0d, maxpower: _nt.CoInteger_0d | None = None) -> _float_1d: ...
@overload
def polypow(c: _nt.ToComplex128_1d, pow: _nt.CoInteger_0d, maxpower: _nt.CoInteger_0d | None = None) -> _c128_1d: ...
@overload
def polypow(c: _nt.ToComplex_1d, pow: _nt.CoInteger_0d, maxpower: _nt.CoInteger_0d | None = None) -> _complex_1d: ...
@overload
def polypow(c: _nt.CoComplex_1d, pow: _nt.CoInteger_0d, maxpower: _nt.CoInteger_0d | None = None) -> _inexact_1d: ...
@overload
def polypow(c: _nt.ToObject_1d, pow: _nt.CoInteger_0d, maxpower: _nt.CoInteger_0d | None = None) -> _object_1d: ...

#
@overload
def polyder(c: _nt.CoInteger_nd, m: _Index = 1, scl: _nt.CoFloating_0d = 1, axis: _Index = 0) -> _f64_nd: ...
@overload
def polyder(c: _nt.ToFloat64_nd, m: _Index = 1, scl: _nt.CoFloating_0d = 1, axis: _Index = 0) -> _f64_nd: ...
@overload
def polyder(c: _nt.ToFloating_nd, m: _Index = 1, scl: _nt.CoFloating_0d = 1, axis: _Index = 0) -> _floating_nd: ...
@overload
def polyder(c: _nt.ToComplex128_nd, m: _Index = 1, scl: _nt.CoComplex_0d = 1, axis: _Index = 0) -> _c128_nd: ...
@overload
def polyder(c: _nt.ToComplex_nd, m: _Index = 1, scl: _nt.CoComplex_0d = 1, axis: _Index = 0) -> _complex_nd: ...
@overload
def polyder(c: _nt.CoComplex_nd, m: _Index = 1, scl: _nt.CoComplex_0d = 1, axis: _Index = 0) -> _inexact_nd: ...
@overload
def polyder(c: _nt.ToObject_nd, m: _Index = 1, scl: _ToNumeric_0d = 1, axis: _Index = 0) -> _object_nd: ...

#
@overload
def polyint(
    c: _nt.CoInteger_nd,
    m: _Index = 1,
    k: _nt.CoFloat64_0d | _nt.CoFloat64_1d = [],
    lbnd: _nt.CoFloating_0d = 0,
    scl: _nt.CoFloating_0d = 1,
    axis: _Index = 0,
) -> _f64_nd: ...
@overload
def polyint(
    c: _nt.ToFloat64_nd,
    m: _Index = 1,
    k: _nt.CoFloat64_0d | _nt.CoFloat64_1d = [],
    lbnd: _nt.CoFloating_0d = 0,
    scl: _nt.CoFloating_0d = 1,
    axis: _Index = 0,
) -> _f64_nd: ...
@overload
def polyint(
    c: _nt.CoFloating_nd,
    m: _Index = 1,
    k: _nt.CoFloating_0d | _nt.CoFloating_1d = [],
    lbnd: _nt.CoFloating_0d = 0,
    scl: _nt.CoFloating_0d = 1,
    axis: _Index = 0,
) -> _floating_nd: ...
@overload
def polyint(
    c: _nt.ToComplex_nd,
    m: _Index = 1,
    k: _nt.CoComplex_0d | _nt.CoComplex_1d = [],
    lbnd: _nt.CoComplex_0d = 0,
    scl: _nt.CoComplex_0d = 1,
    axis: _Index = 0,
) -> _complex_nd: ...
@overload
def polyint(
    c: _nt.CoComplex_nd,
    m: _Index,
    k: _nt.ToComplex_0d | _nt.ToComplex_1d,
    lbnd: _nt.CoComplex_0d = 0,
    scl: _nt.CoComplex_0d = 1,
    axis: _Index = 0,
) -> _complex_nd: ...
@overload
def polyint(
    c: _nt.CoComplex_nd,
    m: _Index = 1,
    *,
    k: _nt.ToComplex_0d | _nt.ToComplex_1d,
    lbnd: _nt.CoComplex_0d = 0,
    scl: _nt.CoComplex_0d = 1,
    axis: _Index = 0,
) -> _complex_nd: ...
@overload
def polyint(
    c: _nt.ToObject_nd,
    m: _Index = 1,
    k: _ToNumeric_0d | _ToNumeric_1d = [],
    lbnd: _ToNumeric_0d = 0,
    scl: _ToNumeric_0d = 1,
    axis: _Index = 0,
) -> _object_nd: ...

#
@overload
def polyvalfromroots(x: _nt.CoFloating_0d, r: _nt.CoFloating_0d, tensor: bool = True) -> np.floating: ...
@overload
def polyvalfromroots(x: _nt.CoFloating_1nd, r: _nt.CoFloating_nd, tensor: bool = True) -> _floating_nd: ...
@overload
def polyvalfromroots(x: _nt.CoFloating_nd, r: _nt.CoFloating_1nd, tensor: bool = True) -> _floating_nd: ...
@overload
def polyvalfromroots(x: _nt.ToComplex_0d, r: _nt.CoComplex_0d, tensor: bool = True) -> np.complexfloating: ...
@overload
def polyvalfromroots(x: _nt.CoComplex_0d, r: _nt.ToComplex_0d, tensor: bool = True) -> np.complexfloating: ...
@overload
def polyvalfromroots(x: _nt.ToComplex_1nd, r: _nt.CoComplex_nd, tensor: bool = True) -> _complex_nd: ...
@overload
def polyvalfromroots(x: _nt.ToComplex_nd, r: _nt.CoComplex_1nd, tensor: bool = True) -> _complex_nd: ...
@overload
def polyvalfromroots(x: _nt.CoComplex_1nd, r: _nt.ToComplex_nd, tensor: bool = True) -> _complex_nd: ...
@overload
def polyvalfromroots(x: _nt.CoComplex_nd, r: _nt.ToComplex_1nd, tensor: bool = True) -> _complex_nd: ...
@overload
def polyvalfromroots(x: _nt.ToObject_1nd, r: _ToNumeric_nd, tensor: bool = True) -> _object_nd: ...
@overload
def polyvalfromroots(x: _ToNumeric_nd, r: _nt.ToObject_1nd, tensor: bool = True) -> _object_nd: ...

#
@overload
def polyval(x: _nt.CoInteger_0d, c: _nt.CoInteger_1d, tensor: bool = True) -> np.float64: ...
@overload
def polyval(x: _nt.ToFloat64_0d, c: _nt.CoFloat64_1d, tensor: bool = True) -> np.float64: ...
@overload
def polyval(x: _nt.CoFloat64_0d, c: _nt.ToFloat64_1d, tensor: bool = True) -> np.float64: ...
@overload
def polyval(x: _nt.CoFloating_0d, c: _nt.CoFloating_1d, tensor: bool = True) -> np.floating: ...
@overload
def polyval(x: _nt.ToComplex_0d, c: _nt.CoComplex_1d, tensor: bool = True) -> np.complexfloating: ...
@overload
def polyval(x: _nt.CoComplex_0d, c: _nt.ToComplex_1d, tensor: bool = True) -> np.complexfloating: ...
@overload
def polyval(x: _nt.ToFloat64_1nd, c: _nt.CoFloat64_1nd, tensor: bool = True) -> _f64_nd: ...
@overload
def polyval(x: _nt.CoFloat64_1nd, c: _nt.ToFloat64_1nd, tensor: bool = True) -> _f64_nd: ...
@overload
def polyval(x: _nt.CoFloating_1nd, c: _nt.CoFloating_1nd, tensor: bool = True) -> _floating_nd: ...
@overload
def polyval(x: _nt.ToComplex_1nd, c: _nt.CoComplex_1nd, tensor: bool = True) -> _complex_nd: ...
@overload
def polyval(x: _nt.CoComplex_1nd, c: _nt.ToComplex_1nd, tensor: bool = True) -> _complex_nd: ...
@overload
def polyval(x: _nt.ToObject_1nd, c: _ToNumeric_nd, tensor: bool = True) -> _object_nd: ...
@overload
def polyval(x: _ToNumeric_nd, c: _nt.ToObject_1nd, tensor: bool = True) -> _object_nd: ...

#
@overload
def polyval2d(x: _nt.CoInteger_0d, y: _nt.CoInteger_0d, c: _nt.CoInteger_1d) -> np.float64: ...
@overload
def polyval2d(x: _nt.ToFloat64_0d, y: _nt.CoFloat64_0d, c: _nt.CoFloat64_1d) -> np.float64: ...
@overload
def polyval2d(x: _nt.CoFloat64_0d, y: _nt.ToFloat64_0d, c: _nt.CoFloat64_1d) -> np.float64: ...
@overload
def polyval2d(x: _nt.CoFloat64_0d, y: _nt.CoFloat64_0d, c: _nt.ToFloat64_1d) -> np.float64: ...
@overload
def polyval2d(x: _nt.CoFloating_0d, y: _nt.CoFloating_0d, c: _nt.CoFloating_1d) -> np.floating: ...
@overload
def polyval2d(x: _nt.ToComplex_0d, y: _nt.CoComplex_0d, c: _nt.CoComplex_1d) -> np.complexfloating: ...
@overload
def polyval2d(x: _nt.CoComplex_0d, y: _nt.ToComplex_0d, c: _nt.CoComplex_1d) -> np.complexfloating: ...
@overload
def polyval2d(x: _nt.CoComplex_0d, y: _nt.CoComplex_0d, c: _nt.ToComplex_1d) -> np.complexfloating: ...
@overload
def polyval2d(x: _nt.ToFloat64_1nd, y: _nt.CoFloat64_nd, c: _nt.CoFloat64_1nd) -> _f64_nd: ...
@overload
def polyval2d(x: _nt.CoFloat64_1nd, y: _nt.ToFloat64_nd, c: _nt.CoFloat64_1nd) -> _f64_nd: ...
@overload
def polyval2d(x: _nt.CoFloat64_1nd, y: _nt.CoFloat64_nd, c: _nt.ToFloat64_1nd) -> _f64_nd: ...
@overload
def polyval2d(x: _nt.ToFloat64_nd, y: _nt.CoFloat64_1nd, c: _nt.CoFloat64_1nd) -> _f64_nd: ...
@overload
def polyval2d(x: _nt.CoFloat64_nd, y: _nt.ToFloat64_1nd, c: _nt.CoFloat64_1nd) -> _f64_nd: ...
@overload
def polyval2d(x: _nt.CoFloat64_nd, y: _nt.CoFloat64_1nd, c: _nt.ToFloat64_1nd) -> _f64_nd: ...
@overload
def polyval2d(x: _nt.CoFloating_1nd, y: _nt.CoFloating_nd, c: _nt.CoFloating_1nd) -> _floating_nd: ...
@overload
def polyval2d(x: _nt.CoFloating_nd, y: _nt.CoFloating_1nd, c: _nt.CoFloating_1nd) -> _floating_nd: ...
@overload
def polyval2d(x: _nt.ToComplex_1nd, y: _nt.CoComplex_nd, c: _nt.CoComplex_1nd) -> _complex_nd: ...
@overload
def polyval2d(x: _nt.CoComplex_1nd, y: _nt.ToComplex_nd, c: _nt.CoComplex_1nd) -> _complex_nd: ...
@overload
def polyval2d(x: _nt.CoComplex_1nd, y: _nt.CoComplex_nd, c: _nt.ToComplex_1nd) -> _complex_nd: ...
@overload
def polyval2d(x: _nt.ToComplex_nd, y: _nt.CoComplex_1nd, c: _nt.CoComplex_1nd) -> _complex_nd: ...
@overload
def polyval2d(x: _nt.CoComplex_nd, y: _nt.ToComplex_1nd, c: _nt.CoComplex_1nd) -> _complex_nd: ...
@overload
def polyval2d(x: _nt.CoComplex_nd, y: _nt.CoComplex_1nd, c: _nt.ToComplex_1nd) -> _complex_nd: ...
@overload
def polyval2d(x: _nt.ToObject_1nd, y: _ToNumeric_nd, c: _ToNumeric_nd) -> _object_nd: ...
@overload
def polyval2d(x: _ToNumeric_nd, y: _nt.ToObject_1nd, c: _ToNumeric_nd) -> _object_nd: ...

# keep in sync with *val2d
@overload
def polygrid2d(x: _nt.CoInteger_0d, y: _nt.CoInteger_0d, c: _nt.CoInteger_1d) -> np.float64: ...
@overload
def polygrid2d(x: _nt.ToFloat64_0d, y: _nt.CoFloat64_0d, c: _nt.CoFloat64_1d) -> np.float64: ...
@overload
def polygrid2d(x: _nt.CoFloat64_0d, y: _nt.ToFloat64_0d, c: _nt.CoFloat64_1d) -> np.float64: ...
@overload
def polygrid2d(x: _nt.CoFloat64_0d, y: _nt.CoFloat64_0d, c: _nt.ToFloat64_1d) -> np.float64: ...
@overload
def polygrid2d(x: _nt.CoFloating_0d, y: _nt.CoFloating_0d, c: _nt.CoFloating_1d) -> np.floating: ...
@overload
def polygrid2d(x: _nt.ToComplex_0d, y: _nt.CoComplex_0d, c: _nt.CoComplex_1d) -> np.complexfloating: ...
@overload
def polygrid2d(x: _nt.CoComplex_0d, y: _nt.ToComplex_0d, c: _nt.CoComplex_1d) -> np.complexfloating: ...
@overload
def polygrid2d(x: _nt.CoComplex_0d, y: _nt.CoComplex_0d, c: _nt.ToComplex_1d) -> np.complexfloating: ...
@overload
def polygrid2d(x: _nt.ToFloat64_1nd, y: _nt.CoFloat64_nd, c: _nt.CoFloat64_1nd) -> _f64_nd: ...
@overload
def polygrid2d(x: _nt.CoFloat64_1nd, y: _nt.ToFloat64_nd, c: _nt.CoFloat64_1nd) -> _f64_nd: ...
@overload
def polygrid2d(x: _nt.CoFloat64_1nd, y: _nt.CoFloat64_nd, c: _nt.ToFloat64_1nd) -> _f64_nd: ...
@overload
def polygrid2d(x: _nt.ToFloat64_nd, y: _nt.CoFloat64_1nd, c: _nt.CoFloat64_1nd) -> _f64_nd: ...
@overload
def polygrid2d(x: _nt.CoFloat64_nd, y: _nt.ToFloat64_1nd, c: _nt.CoFloat64_1nd) -> _f64_nd: ...
@overload
def polygrid2d(x: _nt.CoFloat64_nd, y: _nt.CoFloat64_1nd, c: _nt.ToFloat64_1nd) -> _f64_nd: ...
@overload
def polygrid2d(x: _nt.CoFloating_1nd, y: _nt.CoFloating_nd, c: _nt.CoFloating_1nd) -> _floating_nd: ...
@overload
def polygrid2d(x: _nt.CoFloating_nd, y: _nt.CoFloating_1nd, c: _nt.CoFloating_1nd) -> _floating_nd: ...
@overload
def polygrid2d(x: _nt.ToComplex_1nd, y: _nt.CoComplex_nd, c: _nt.CoComplex_1nd) -> _complex_nd: ...
@overload
def polygrid2d(x: _nt.CoComplex_1nd, y: _nt.ToComplex_nd, c: _nt.CoComplex_1nd) -> _complex_nd: ...
@overload
def polygrid2d(x: _nt.CoComplex_1nd, y: _nt.CoComplex_nd, c: _nt.ToComplex_1nd) -> _complex_nd: ...
@overload
def polygrid2d(x: _nt.ToComplex_nd, y: _nt.CoComplex_1nd, c: _nt.CoComplex_1nd) -> _complex_nd: ...
@overload
def polygrid2d(x: _nt.CoComplex_nd, y: _nt.ToComplex_1nd, c: _nt.CoComplex_1nd) -> _complex_nd: ...
@overload
def polygrid2d(x: _nt.CoComplex_nd, y: _nt.CoComplex_1nd, c: _nt.ToComplex_1nd) -> _complex_nd: ...
@overload
def polygrid2d(x: _nt.ToObject_1nd, y: _ToNumeric_nd, c: _ToNumeric_nd) -> _object_nd: ...
@overload
def polygrid2d(x: _ToNumeric_nd, y: _nt.ToObject_1nd, c: _ToNumeric_nd) -> _object_nd: ...

#
@overload
def polyval3d(
    x: _nt.CoFloating_0d, y: _nt.CoFloating_0d, z: _nt.CoFloating_0d, c: _nt.CoFloating_1d
) -> np.floating: ...
@overload
def polyval3d(
    x: _nt.CoFloating_1nd, y: _nt.CoFloating_nd, z: _nt.CoFloating_nd, c: _nt.CoFloating_1nd
) -> _floating_nd: ...
@overload
def polyval3d(
    x: _nt.CoFloating_nd, y: _nt.CoFloating_1nd, z: _nt.CoFloating_nd, c: _nt.CoFloating_1nd
) -> _floating_nd: ...
@overload
def polyval3d(
    x: _nt.CoFloating_nd, y: _nt.CoFloating_nd, z: _nt.CoFloating_1nd, c: _nt.CoFloating_1nd
) -> _floating_nd: ...
@overload
def polyval3d(
    x: _nt.ToComplex_0d, y: _nt.CoComplex_0d, z: _nt.CoComplex_0d, c: _nt.CoComplex_1d
) -> np.complexfloating: ...
@overload
def polyval3d(
    x: _nt.CoComplex_0d, y: _nt.ToComplex_0d, z: _nt.CoComplex_0d, c: _nt.CoComplex_1d
) -> np.complexfloating: ...
@overload
def polyval3d(
    x: _nt.CoComplex_0d, y: _nt.CoComplex_0d, z: _nt.ToComplex_0d, c: _nt.CoComplex_1d
) -> np.complexfloating: ...
@overload
def polyval3d(
    x: _nt.CoComplex_0d, y: _nt.CoComplex_0d, z: _nt.CoComplex_0d, c: _nt.ToComplex_1d
) -> np.complexfloating: ...
@overload
def polyval3d(x: _nt.ToComplex_1nd, y: _nt.CoComplex_nd, z: _nt.CoComplex_nd, c: _nt.CoComplex_1nd) -> _complex_nd: ...
@overload
def polyval3d(x: _nt.CoComplex_nd, y: _nt.ToComplex_1nd, z: _nt.CoComplex_nd, c: _nt.CoComplex_1nd) -> _complex_nd: ...
@overload
def polyval3d(x: _nt.CoComplex_nd, y: _nt.CoComplex_nd, z: _nt.ToComplex_1nd, c: _nt.CoComplex_1nd) -> _complex_nd: ...
@overload
def polyval3d(x: _nt.CoComplex_1nd, y: _nt.CoComplex_nd, z: _nt.CoComplex_nd, c: _nt.ToComplex_1nd) -> _complex_nd: ...
@overload
def polyval3d(x: _nt.CoComplex_nd, y: _nt.CoComplex_1nd, z: _nt.CoComplex_nd, c: _nt.ToComplex_1nd) -> _complex_nd: ...
@overload
def polyval3d(x: _nt.CoComplex_nd, y: _nt.CoComplex_nd, z: _nt.CoComplex_1nd, c: _nt.ToComplex_1nd) -> _complex_nd: ...
@overload
def polyval3d(x: _nt.ToObject_1nd, y: _ToNumeric_nd, z: _ToNumeric_nd, c: _ToNumeric_nd) -> _object_nd: ...
@overload
def polyval3d(x: _nt.ToObject_1nd, y: _nt.ToObject_1nd, z: _ToNumeric_nd, c: _ToNumeric_nd) -> _object_nd: ...
@overload
def polyval3d(x: _ToNumeric_nd, y: _ToNumeric_nd, z: _nt.ToObject_1nd, c: _ToNumeric_nd) -> _object_nd: ...
@overload
def polyval3d(x: _ToNumeric_nd, y: _ToNumeric_nd, z: _ToNumeric_nd, c: _nt.ToObject_1nd) -> _object_nd: ...

# keep in sync with *val3d
@overload
def polygrid3d(
    x: _nt.CoFloating_0d, y: _nt.CoFloating_0d, z: _nt.CoFloating_0d, c: _nt.CoFloating_1d
) -> np.floating: ...
@overload
def polygrid3d(
    x: _nt.CoFloating_1nd, y: _nt.CoFloating_nd, z: _nt.CoFloating_nd, c: _nt.CoFloating_1nd
) -> _floating_nd: ...
@overload
def polygrid3d(
    x: _nt.CoFloating_nd, y: _nt.CoFloating_1nd, z: _nt.CoFloating_nd, c: _nt.CoFloating_1nd
) -> _floating_nd: ...
@overload
def polygrid3d(
    x: _nt.CoFloating_nd, y: _nt.CoFloating_nd, z: _nt.CoFloating_1nd, c: _nt.CoFloating_1nd
) -> _floating_nd: ...
@overload
def polygrid3d(
    x: _nt.ToComplex_0d, y: _nt.CoComplex_0d, z: _nt.CoComplex_0d, c: _nt.CoComplex_1d
) -> np.complexfloating: ...
@overload
def polygrid3d(
    x: _nt.CoComplex_0d, y: _nt.ToComplex_0d, z: _nt.CoComplex_0d, c: _nt.CoComplex_1d
) -> np.complexfloating: ...
@overload
def polygrid3d(
    x: _nt.CoComplex_0d, y: _nt.CoComplex_0d, z: _nt.ToComplex_0d, c: _nt.CoComplex_1d
) -> np.complexfloating: ...
@overload
def polygrid3d(
    x: _nt.CoComplex_0d, y: _nt.CoComplex_0d, z: _nt.CoComplex_0d, c: _nt.ToComplex_1d
) -> np.complexfloating: ...
@overload
def polygrid3d(x: _nt.ToComplex_1nd, y: _nt.CoComplex_nd, z: _nt.CoComplex_nd, c: _nt.CoComplex_1nd) -> _complex_nd: ...
@overload
def polygrid3d(x: _nt.CoComplex_nd, y: _nt.ToComplex_1nd, z: _nt.CoComplex_nd, c: _nt.CoComplex_1nd) -> _complex_nd: ...
@overload
def polygrid3d(x: _nt.CoComplex_nd, y: _nt.CoComplex_nd, z: _nt.ToComplex_1nd, c: _nt.CoComplex_1nd) -> _complex_nd: ...
@overload
def polygrid3d(x: _nt.CoComplex_1nd, y: _nt.CoComplex_nd, z: _nt.CoComplex_nd, c: _nt.ToComplex_1nd) -> _complex_nd: ...
@overload
def polygrid3d(x: _nt.CoComplex_nd, y: _nt.CoComplex_1nd, z: _nt.CoComplex_nd, c: _nt.ToComplex_1nd) -> _complex_nd: ...
@overload
def polygrid3d(x: _nt.CoComplex_nd, y: _nt.CoComplex_nd, z: _nt.CoComplex_1nd, c: _nt.ToComplex_1nd) -> _complex_nd: ...
@overload
def polygrid3d(x: _nt.ToObject_1nd, y: _ToNumeric_nd, z: _ToNumeric_nd, c: _ToNumeric_nd) -> _object_nd: ...
@overload
def polygrid3d(x: _nt.ToObject_1nd, y: _nt.ToObject_1nd, z: _ToNumeric_nd, c: _ToNumeric_nd) -> _object_nd: ...
@overload
def polygrid3d(x: _ToNumeric_nd, y: _ToNumeric_nd, z: _nt.ToObject_1nd, c: _ToNumeric_nd) -> _object_nd: ...
@overload
def polygrid3d(x: _ToNumeric_nd, y: _ToNumeric_nd, z: _ToNumeric_nd, c: _nt.ToObject_1nd) -> _object_nd: ...

#
@overload
def polyvander(x: _nt.ToFloat64_nd | _nt.CoInteger_nd, deg: _Index) -> _f64_nd: ...
@overload
def polyvander(x: _nt.CoFloating_nd, deg: _Index) -> _floating_nd: ...
@overload
def polyvander(x: _nt.ToComplex128_nd, deg: _Index) -> _c128_nd: ...
@overload
def polyvander(x: _nt.ToComplex_nd, deg: _Index) -> _complex_nd: ...
@overload
def polyvander(x: _nt.CoComplex_nd, deg: _Index) -> _inexact_nd: ...
@overload
def polyvander(x: _nt.ToObject_nd, deg: _Index) -> _object_nd: ...
@overload
def polyvander(x: _ToNumeric_nd, deg: _Index) -> _nt.Array: ...

#
@overload
def polyvander2d(x: _nt.CoInteger_nd, y: _nt.CoInteger_nd, deg: _Indices) -> _f64_nd: ...
@overload
def polyvander2d(x: _nt.ToFloat64_nd, y: _nt.CoFloat64_nd, deg: _Indices) -> _f64_nd: ...
@overload
def polyvander2d(x: _nt.CoFloat64_nd, y: _nt.ToFloat64_nd, deg: _Indices) -> _f64_nd: ...
@overload
def polyvander2d(x: _nt.CoFloating_nd, y: _nt.CoFloating_nd, deg: _Indices) -> _floating_nd: ...
@overload
def polyvander2d(x: _nt.ToComplex_nd, y: _nt.CoComplex_nd, deg: _Indices) -> _complex_nd: ...
@overload
def polyvander2d(x: _nt.CoComplex_nd, y: _nt.ToComplex_nd, deg: _Indices) -> _complex_nd: ...
@overload
def polyvander2d(x: _nt.ToObject_nd, y: _ToNumeric_nd, deg: _Indices) -> _object_nd: ...
@overload
def polyvander2d(x: _ToNumeric_nd, y: _nt.ToObject_nd, deg: _Indices) -> _object_nd: ...
@overload
def polyvander2d(x: _ToNumeric_nd, y: _ToNumeric_nd, deg: _Indices) -> _nt.Array: ...

#
@overload
def polyvander3d(x: _nt.CoInteger_nd, y: _nt.CoInteger_nd, z: _nt.CoInteger_nd, deg: _Indices) -> _f64_nd: ...
@overload
def polyvander3d(x: _nt.ToFloat64_nd, y: _nt.CoFloat64_nd, z: _nt.CoFloat64_nd, deg: _Indices) -> _f64_nd: ...
@overload
def polyvander3d(x: _nt.CoFloat64_nd, y: _nt.ToFloat64_nd, z: _nt.CoFloat64_nd, deg: _Indices) -> _f64_nd: ...
@overload
def polyvander3d(x: _nt.CoFloat64_nd, y: _nt.CoFloat64_nd, z: _nt.ToFloat64_nd, deg: _Indices) -> _f64_nd: ...
@overload
def polyvander3d(x: _nt.CoFloating_nd, y: _nt.CoFloating_nd, z: _nt.CoFloating_nd, deg: _Indices) -> _floating_nd: ...
@overload
def polyvander3d(x: _nt.ToComplex_nd, y: _nt.CoComplex_nd, z: _nt.CoComplex_nd, deg: _Indices) -> _complex_nd: ...
@overload
def polyvander3d(x: _nt.CoComplex_nd, y: _nt.ToComplex_nd, z: _nt.CoComplex_nd, deg: _Indices) -> _complex_nd: ...
@overload
def polyvander3d(x: _nt.CoComplex_nd, y: _nt.CoComplex_nd, z: _nt.ToComplex_nd, deg: _Indices) -> _complex_nd: ...
@overload
def polyvander3d(x: _nt.ToObject_nd, y: _ToNumeric_nd, z: _ToNumeric_nd, deg: _Indices) -> _object_nd: ...
@overload
def polyvander3d(x: _ToNumeric_nd, y: _nt.ToObject_nd, z: _ToNumeric_nd, deg: _Indices) -> _object_nd: ...
@overload
def polyvander3d(x: _ToNumeric_nd, y: _ToNumeric_nd, z: _nt.ToObject_nd, deg: _Indices) -> _object_nd: ...
@overload
def polyvander3d(x: _ToNumeric_nd, y: _ToNumeric_nd, z: _ToNumeric_nd, deg: _Indices) -> _nt.Array: ...

#
@overload
def polyfit(
    x: _nt.ToFloat64_1d | _nt.CoInteger_1d,
    y: _nt.ToFloat64_nd | _nt.CoInteger_nd,
    deg: int | _nt.CoInteger_1d,
    rcond: float | None = None,
    full: L[False] = False,
    w: _nt.ToFloating_1d | None = None,
) -> _f64_nd: ...
@overload
def polyfit(
    x: _nt.ToFloat64_1d | _nt.CoInteger_1d,
    y: _nt.ToFloat64_nd | _nt.CoInteger_nd,
    deg: int | _nt.CoInteger_1d,
    rcond: float | None,
    full: L[True],
    w: _nt.ToFloating_1d | None = None,
) -> _ArrayAndFitResult[np.float64]: ...
@overload
def polyfit(
    x: _nt.ToFloat64_1d | _nt.CoInteger_1d,
    y: _nt.ToFloat64_nd | _nt.CoInteger_nd,
    deg: int | _nt.CoInteger_1d,
    rcond: float | None = None,
    *,
    full: L[True],
    w: _nt.ToFloating_1d | None = None,
) -> _ArrayAndFitResult[np.float64]: ...
@overload
def polyfit(
    x: _nt.ToFloating_1d,
    y: _nt.CoFloating_nd,
    deg: int | _nt.CoInteger_1d,
    rcond: float | None = None,
    full: L[False] = False,
    w: _nt.ToFloating_1d | None = None,
) -> _floating_nd: ...
@overload
def polyfit(
    x: _nt.ToFloating_1d,
    y: _nt.CoFloating_nd,
    deg: int | _nt.CoInteger_1d,
    rcond: float | None,
    full: L[True],
    w: _nt.ToFloating_1d | None = None,
) -> _ArrayAndFitResult[np.floating]: ...
@overload
def polyfit(
    x: _nt.ToFloating_1d,
    y: _nt.CoFloating_nd,
    deg: int | _nt.CoInteger_1d,
    rcond: float | None = None,
    *,
    full: L[True],
    w: _nt.ToFloating_1d | None = None,
) -> _ArrayAndFitResult[np.floating]: ...
@overload
def polyfit(
    x: _nt.ToComplex_1d,
    y: _nt.CoComplex_nd,
    deg: int | _nt.CoInteger_1d,
    rcond: float | None = None,
    full: L[False] = False,
    w: _nt.ToFloating_1d | None = None,
) -> _complex_nd: ...
@overload
def polyfit(
    x: _nt.CoComplex_1d,
    y: _nt.ToComplex_nd,
    deg: int | _nt.CoInteger_1d,
    rcond: float | None = None,
    full: L[False] = False,
    w: _nt.ToFloating_1d | None = None,
) -> _complex_nd: ...
@overload
def polyfit(
    x: _nt.ToComplex_1d,
    y: _nt.CoComplex_nd,
    deg: int | _nt.CoInteger_1d,
    rcond: float | None,
    full: L[True],
    w: _nt.ToFloating_1d | None = None,
) -> _ArrayAndFitResult[np.complexfloating]: ...
@overload
def polyfit(
    x: _nt.CoComplex_1d,
    y: _nt.ToComplex_nd,
    deg: int | _nt.CoInteger_1d,
    rcond: float | None,
    full: L[True],
    w: _nt.ToFloating_1d | None = None,
) -> _ArrayAndFitResult[np.complexfloating]: ...
@overload
def polyfit(
    x: _nt.CoComplex_1d,
    y: _nt.ToComplex_nd,
    deg: int | _nt.CoInteger_1d,
    rcond: float | None = None,
    *,
    full: L[True],
    w: _nt.ToFloating_1d | None = None,
) -> _ArrayAndFitResult[np.complexfloating]: ...
@overload
def polyfit(
    x: _nt.ToComplex_1d,
    y: _nt.CoComplex_nd,
    deg: int | _nt.CoInteger_1d,
    rcond: float | None = None,
    *,
    full: L[True],
    w: _nt.ToFloating_1d | None = None,
) -> _ArrayAndFitResult[np.complexfloating]: ...
@overload
def polyfit(
    x: _nt.ToObject_1d,
    y: _ToNumeric_nd,
    deg: int | _nt.CoInteger_1d,
    rcond: float | None = None,
    full: L[False] = False,
    w: _nt.ToFloating_1d | None = None,
) -> _object_nd: ...
@overload
def polyfit(
    x: _ToNumeric_1d,
    y: _nt.ToObject_nd,
    deg: int | _nt.CoInteger_1d,
    rcond: float | None,
    full: L[True],
    w: _nt.ToFloating_1d | None = None,
) -> _ArrayAndFitResult[np.object_]: ...
@overload
def polyfit(
    x: _nt.ToObject_1d,
    y: _ToNumeric_nd,
    deg: int | _nt.CoInteger_1d,
    rcond: float | None = None,
    *,
    full: L[True],
    w: _nt.ToFloating_1d | None = None,
) -> _ArrayAndFitResult[np.object_]: ...
@overload
def polyfit(
    x: _ToNumeric_1d,
    y: _nt.ToObject_nd,
    deg: int | _nt.CoInteger_1d,
    rcond: float | None = None,
    *,
    full: L[True],
    w: _nt.ToFloating_1d | None = None,
) -> _ArrayAndFitResult[np.object_]: ...

#
@overload
def polycompanion(c: _nt.CoFloating_1d) -> _nt.Array2D[np.float64]: ...
@overload
def polycompanion(c: _nt.ToComplex_1d) -> _nt.Array2D[np.complex128]: ...
@overload
def polycompanion(c: _nt.ToObject_1d) -> _nt.Array2D[np.object_]: ...

#
@overload
def polyroots(c: _nt.CoFloating_1d) -> _f64_1d: ...
@overload
def polyroots(c: _nt.ToComplex_1d) -> _c128_1d: ...
@overload
def polyroots(c: _nt.ToObject_1d) -> _object_1d: ...
