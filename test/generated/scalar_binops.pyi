# @generated 2025-02-27T01:00:34Z
from typing_extensions import assert_type

import numpy as np

###
# scalars

u1: np.uint8
u2: np.uint16
u4: np.uint32
u8: np.uint64
i1: np.int8
i2: np.int16
i4: np.int32
i8: np.int64
f2: np.float16
f4: np.float32
f8: np.float64
ld: np.longdouble
m8: np.timedelta64
M8: np.datetime64

###
# __[r]add__

assert_type(u1 + u1, np.uint8)
assert_type(u1 + u2, np.uint16)
assert_type(u1 + u4, np.uint32)
assert_type(u1 + u8, np.uint64)
assert_type(u1 + i1, np.int16)
assert_type(u1 + i2, np.int16)
assert_type(u1 + i4, np.int32)
assert_type(u1 + i8, np.int64)
assert_type(u1 + f2, np.float16)
assert_type(u1 + f4, np.float32)
assert_type(u1 + f8, np.float64)
assert_type(u1 + ld, np.longdouble)
assert_type(u1 + m8, np.timedelta64)
assert_type(u1 + M8, np.datetime64)

assert_type(u2 + u1, np.uint16)
assert_type(u2 + u2, np.uint16)
assert_type(u2 + u4, np.uint32)
assert_type(u2 + u8, np.uint64)
assert_type(u2 + i1, np.int32)
assert_type(u2 + i2, np.int32)
assert_type(u2 + i4, np.int32)
assert_type(u2 + i8, np.int64)
assert_type(u2 + f2, np.float32)
assert_type(u2 + f4, np.float32)
assert_type(u2 + f8, np.float64)
assert_type(u2 + ld, np.longdouble)
assert_type(u2 + m8, np.timedelta64)
assert_type(u2 + M8, np.datetime64)

assert_type(u4 + u1, np.uint32)
assert_type(u4 + u2, np.uint32)
assert_type(u4 + u4, np.uint32)
assert_type(u4 + u8, np.uint64)
assert_type(u4 + i1, np.int64)
assert_type(u4 + i2, np.int64)
assert_type(u4 + i4, np.int64)
assert_type(u4 + i8, np.int64)
assert_type(u4 + f2, np.float64)
assert_type(u4 + f4, np.float64)
assert_type(u4 + f8, np.float64)
assert_type(u4 + ld, np.longdouble)
assert_type(u4 + m8, np.timedelta64)
assert_type(u4 + M8, np.datetime64)

assert_type(u8 + u1, np.uint64)
assert_type(u8 + u2, np.uint64)
assert_type(u8 + u4, np.uint64)
assert_type(u8 + u8, np.uint64)
assert_type(u8 + i1, np.float64)
assert_type(u8 + i2, np.float64)
assert_type(u8 + i4, np.float64)
assert_type(u8 + i8, np.float64)
assert_type(u8 + f2, np.float64)
assert_type(u8 + f4, np.float64)
assert_type(u8 + f8, np.float64)
assert_type(u8 + ld, np.longdouble)
assert_type(u8 + m8, np.timedelta64)
assert_type(u8 + M8, np.datetime64)

assert_type(i1 + u1, np.int16)
assert_type(i1 + u2, np.int32)
assert_type(i1 + u4, np.int64)
assert_type(i1 + u8, np.float64)
assert_type(i1 + i1, np.int8)
assert_type(i1 + i2, np.int16)
assert_type(i1 + i4, np.int32)
assert_type(i1 + i8, np.int64)
assert_type(i1 + f2, np.float16)
assert_type(i1 + f4, np.float32)
assert_type(i1 + f8, np.float64)
assert_type(i1 + ld, np.longdouble)
assert_type(i1 + m8, np.timedelta64)
assert_type(i1 + M8, np.datetime64)

assert_type(i2 + u1, np.int16)
assert_type(i2 + u2, np.int32)
assert_type(i2 + u4, np.int64)
assert_type(i2 + u8, np.float64)
assert_type(i2 + i1, np.int16)
assert_type(i2 + i2, np.int16)
assert_type(i2 + i4, np.int32)
assert_type(i2 + i8, np.int64)
assert_type(i2 + f2, np.float32)
assert_type(i2 + f4, np.float32)
assert_type(i2 + f8, np.float64)
assert_type(i2 + ld, np.longdouble)
assert_type(i2 + m8, np.timedelta64)
assert_type(i2 + M8, np.datetime64)

assert_type(i4 + u1, np.int32)
assert_type(i4 + u2, np.int32)
assert_type(i4 + u4, np.int64)
assert_type(i4 + u8, np.float64)
assert_type(i4 + i1, np.int32)
assert_type(i4 + i2, np.int32)
assert_type(i4 + i4, np.int32)
assert_type(i4 + i8, np.int64)
assert_type(i4 + f2, np.float64)
assert_type(i4 + f4, np.float64)
assert_type(i4 + f8, np.float64)
assert_type(i4 + ld, np.longdouble)
assert_type(i4 + m8, np.timedelta64)
assert_type(i4 + M8, np.datetime64)

assert_type(i8 + u1, np.int64)
assert_type(i8 + u2, np.int64)
assert_type(i8 + u4, np.int64)
assert_type(i8 + u8, np.float64)
assert_type(i8 + i1, np.int64)
assert_type(i8 + i2, np.int64)
assert_type(i8 + i4, np.int64)
assert_type(i8 + i8, np.int64)
assert_type(i8 + f2, np.float64)
assert_type(i8 + f4, np.float64)
assert_type(i8 + f8, np.float64)
assert_type(i8 + ld, np.longdouble)
assert_type(i8 + m8, np.timedelta64)
assert_type(i8 + M8, np.datetime64)

assert_type(f2 + u1, np.float16)
assert_type(f2 + u2, np.float32)
assert_type(f2 + u4, np.float64)
assert_type(f2 + u8, np.float64)
assert_type(f2 + i1, np.float16)
assert_type(f2 + i2, np.float32)
assert_type(f2 + i4, np.float64)
assert_type(f2 + i8, np.float64)
assert_type(f2 + f2, np.float16)
assert_type(f2 + f4, np.float32)
assert_type(f2 + f8, np.float64)
assert_type(f2 + ld, np.longdouble)
f2 + m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
f2 + M8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(f4 + u1, np.float32)
assert_type(f4 + u2, np.float32)
assert_type(f4 + u4, np.float64)
assert_type(f4 + u8, np.float64)
assert_type(f4 + i1, np.float32)
assert_type(f4 + i2, np.float32)
assert_type(f4 + i4, np.float64)
assert_type(f4 + i8, np.float64)
assert_type(f4 + f2, np.float32)
assert_type(f4 + f4, np.float32)
assert_type(f4 + f8, np.float64)
assert_type(f4 + ld, np.longdouble)
f4 + m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
f4 + M8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(f8 + u1, np.float64)
assert_type(f8 + u2, np.float64)
assert_type(f8 + u4, np.float64)
assert_type(f8 + u8, np.float64)
assert_type(f8 + i1, np.float64)
assert_type(f8 + i2, np.float64)
assert_type(f8 + i4, np.float64)
assert_type(f8 + i8, np.float64)
assert_type(f8 + f2, np.float64)
assert_type(f8 + f4, np.float64)
assert_type(f8 + f8, np.float64)
assert_type(f8 + ld, np.longdouble)
f8 + m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
f8 + M8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(ld + u1, np.longdouble)
assert_type(ld + u2, np.longdouble)
assert_type(ld + u4, np.longdouble)
assert_type(ld + u8, np.longdouble)
assert_type(ld + i1, np.longdouble)
assert_type(ld + i2, np.longdouble)
assert_type(ld + i4, np.longdouble)
assert_type(ld + i8, np.longdouble)
assert_type(ld + f2, np.longdouble)
assert_type(ld + f4, np.longdouble)
assert_type(ld + f8, np.longdouble)
assert_type(ld + ld, np.longdouble)
ld + m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
ld + M8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(m8 + u1, np.timedelta64)
assert_type(m8 + u2, np.timedelta64)
assert_type(m8 + u4, np.timedelta64)
assert_type(m8 + u8, np.timedelta64)
assert_type(m8 + i1, np.timedelta64)
assert_type(m8 + i2, np.timedelta64)
assert_type(m8 + i4, np.timedelta64)
assert_type(m8 + i8, np.timedelta64)
m8 + f2  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
m8 + f4  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
m8 + f8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
m8 + ld  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
assert_type(m8 + m8, np.timedelta64)
assert_type(m8 + M8, np.datetime64)

assert_type(M8 + u1, np.datetime64)
assert_type(M8 + u2, np.datetime64)
assert_type(M8 + u4, np.datetime64)
assert_type(M8 + u8, np.datetime64)
assert_type(M8 + i1, np.datetime64)
assert_type(M8 + i2, np.datetime64)
assert_type(M8 + i4, np.datetime64)
assert_type(M8 + i8, np.datetime64)
M8 + f2  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
M8 + f4  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
M8 + f8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
M8 + ld  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
assert_type(M8 + m8, np.datetime64)
M8 + M8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

###
# __[r]sub__

assert_type(u1 - u1, np.uint8)
assert_type(u1 - u2, np.uint16)
assert_type(u1 - u4, np.uint32)
assert_type(u1 - u8, np.uint64)
assert_type(u1 - i1, np.int16)
assert_type(u1 - i2, np.int16)
assert_type(u1 - i4, np.int32)
assert_type(u1 - i8, np.int64)
assert_type(u1 - f2, np.float16)
assert_type(u1 - f4, np.float32)
assert_type(u1 - f8, np.float64)
assert_type(u1 - ld, np.longdouble)
assert_type(u1 - m8, np.timedelta64)
u1 - M8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(u2 - u1, np.uint16)
assert_type(u2 - u2, np.uint16)
assert_type(u2 - u4, np.uint32)
assert_type(u2 - u8, np.uint64)
assert_type(u2 - i1, np.int32)
assert_type(u2 - i2, np.int32)
assert_type(u2 - i4, np.int32)
assert_type(u2 - i8, np.int64)
assert_type(u2 - f2, np.float32)
assert_type(u2 - f4, np.float32)
assert_type(u2 - f8, np.float64)
assert_type(u2 - ld, np.longdouble)
assert_type(u2 - m8, np.timedelta64)
u2 - M8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(u4 - u1, np.uint32)
assert_type(u4 - u2, np.uint32)
assert_type(u4 - u4, np.uint32)
assert_type(u4 - u8, np.uint64)
assert_type(u4 - i1, np.int64)
assert_type(u4 - i2, np.int64)
assert_type(u4 - i4, np.int64)
assert_type(u4 - i8, np.int64)
assert_type(u4 - f2, np.float64)
assert_type(u4 - f4, np.float64)
assert_type(u4 - f8, np.float64)
assert_type(u4 - ld, np.longdouble)
assert_type(u4 - m8, np.timedelta64)
u4 - M8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(u8 - u1, np.uint64)
assert_type(u8 - u2, np.uint64)
assert_type(u8 - u4, np.uint64)
assert_type(u8 - u8, np.uint64)
assert_type(u8 - i1, np.float64)
assert_type(u8 - i2, np.float64)
assert_type(u8 - i4, np.float64)
assert_type(u8 - i8, np.float64)
assert_type(u8 - f2, np.float64)
assert_type(u8 - f4, np.float64)
assert_type(u8 - f8, np.float64)
assert_type(u8 - ld, np.longdouble)
assert_type(u8 - m8, np.timedelta64)
u8 - M8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(i1 - u1, np.int16)
assert_type(i1 - u2, np.int32)
assert_type(i1 - u4, np.int64)
assert_type(i1 - u8, np.float64)
assert_type(i1 - i1, np.int8)
assert_type(i1 - i2, np.int16)
assert_type(i1 - i4, np.int32)
assert_type(i1 - i8, np.int64)
assert_type(i1 - f2, np.float16)
assert_type(i1 - f4, np.float32)
assert_type(i1 - f8, np.float64)
assert_type(i1 - ld, np.longdouble)
assert_type(i1 - m8, np.timedelta64)
i1 - M8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(i2 - u1, np.int16)
assert_type(i2 - u2, np.int32)
assert_type(i2 - u4, np.int64)
assert_type(i2 - u8, np.float64)
assert_type(i2 - i1, np.int16)
assert_type(i2 - i2, np.int16)
assert_type(i2 - i4, np.int32)
assert_type(i2 - i8, np.int64)
assert_type(i2 - f2, np.float32)
assert_type(i2 - f4, np.float32)
assert_type(i2 - f8, np.float64)
assert_type(i2 - ld, np.longdouble)
assert_type(i2 - m8, np.timedelta64)
i2 - M8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(i4 - u1, np.int32)
assert_type(i4 - u2, np.int32)
assert_type(i4 - u4, np.int64)
assert_type(i4 - u8, np.float64)
assert_type(i4 - i1, np.int32)
assert_type(i4 - i2, np.int32)
assert_type(i4 - i4, np.int32)
assert_type(i4 - i8, np.int64)
assert_type(i4 - f2, np.float64)
assert_type(i4 - f4, np.float64)
assert_type(i4 - f8, np.float64)
assert_type(i4 - ld, np.longdouble)
assert_type(i4 - m8, np.timedelta64)
i4 - M8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(i8 - u1, np.int64)
assert_type(i8 - u2, np.int64)
assert_type(i8 - u4, np.int64)
assert_type(i8 - u8, np.float64)
assert_type(i8 - i1, np.int64)
assert_type(i8 - i2, np.int64)
assert_type(i8 - i4, np.int64)
assert_type(i8 - i8, np.int64)
assert_type(i8 - f2, np.float64)
assert_type(i8 - f4, np.float64)
assert_type(i8 - f8, np.float64)
assert_type(i8 - ld, np.longdouble)
assert_type(i8 - m8, np.timedelta64)
i8 - M8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(f2 - u1, np.float16)
assert_type(f2 - u2, np.float32)
assert_type(f2 - u4, np.float64)
assert_type(f2 - u8, np.float64)
assert_type(f2 - i1, np.float16)
assert_type(f2 - i2, np.float32)
assert_type(f2 - i4, np.float64)
assert_type(f2 - i8, np.float64)
assert_type(f2 - f2, np.float16)
assert_type(f2 - f4, np.float32)
assert_type(f2 - f8, np.float64)
assert_type(f2 - ld, np.longdouble)
f2 - m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
f2 - M8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(f4 - u1, np.float32)
assert_type(f4 - u2, np.float32)
assert_type(f4 - u4, np.float64)
assert_type(f4 - u8, np.float64)
assert_type(f4 - i1, np.float32)
assert_type(f4 - i2, np.float32)
assert_type(f4 - i4, np.float64)
assert_type(f4 - i8, np.float64)
assert_type(f4 - f2, np.float32)
assert_type(f4 - f4, np.float32)
assert_type(f4 - f8, np.float64)
assert_type(f4 - ld, np.longdouble)
f4 - m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
f4 - M8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(f8 - u1, np.float64)
assert_type(f8 - u2, np.float64)
assert_type(f8 - u4, np.float64)
assert_type(f8 - u8, np.float64)
assert_type(f8 - i1, np.float64)
assert_type(f8 - i2, np.float64)
assert_type(f8 - i4, np.float64)
assert_type(f8 - i8, np.float64)
assert_type(f8 - f2, np.float64)
assert_type(f8 - f4, np.float64)
assert_type(f8 - f8, np.float64)
assert_type(f8 - ld, np.longdouble)
f8 - m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
f8 - M8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(ld - u1, np.longdouble)
assert_type(ld - u2, np.longdouble)
assert_type(ld - u4, np.longdouble)
assert_type(ld - u8, np.longdouble)
assert_type(ld - i1, np.longdouble)
assert_type(ld - i2, np.longdouble)
assert_type(ld - i4, np.longdouble)
assert_type(ld - i8, np.longdouble)
assert_type(ld - f2, np.longdouble)
assert_type(ld - f4, np.longdouble)
assert_type(ld - f8, np.longdouble)
assert_type(ld - ld, np.longdouble)
ld - m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
ld - M8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(m8 - u1, np.timedelta64)
assert_type(m8 - u2, np.timedelta64)
assert_type(m8 - u4, np.timedelta64)
assert_type(m8 - u8, np.timedelta64)
assert_type(m8 - i1, np.timedelta64)
assert_type(m8 - i2, np.timedelta64)
assert_type(m8 - i4, np.timedelta64)
assert_type(m8 - i8, np.timedelta64)
m8 - f2  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
m8 - f4  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
m8 - f8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
m8 - ld  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
assert_type(m8 - m8, np.timedelta64)
m8 - M8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(M8 - u1, np.datetime64)
assert_type(M8 - u2, np.datetime64)
assert_type(M8 - u4, np.datetime64)
assert_type(M8 - u8, np.datetime64)
assert_type(M8 - i1, np.datetime64)
assert_type(M8 - i2, np.datetime64)
assert_type(M8 - i4, np.datetime64)
assert_type(M8 - i8, np.datetime64)
M8 - f2  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
M8 - f4  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
M8 - f8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
M8 - ld  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
assert_type(M8 - m8, np.datetime64)
assert_type(M8 - M8, np.timedelta64)

###
# __[r]mul__

assert_type(u1 * u1, np.uint8)
assert_type(u1 * u2, np.uint16)
assert_type(u1 * u4, np.uint32)
assert_type(u1 * u8, np.uint64)
assert_type(u1 * i1, np.int16)
assert_type(u1 * i2, np.int16)
assert_type(u1 * i4, np.int32)
assert_type(u1 * i8, np.int64)
assert_type(u1 * f2, np.float16)
assert_type(u1 * f4, np.float32)
assert_type(u1 * f8, np.float64)
assert_type(u1 * ld, np.longdouble)
assert_type(u1 * m8, np.timedelta64)

assert_type(u2 * u1, np.uint16)
assert_type(u2 * u2, np.uint16)
assert_type(u2 * u4, np.uint32)
assert_type(u2 * u8, np.uint64)
assert_type(u2 * i1, np.int32)
assert_type(u2 * i2, np.int32)
assert_type(u2 * i4, np.int32)
assert_type(u2 * i8, np.int64)
assert_type(u2 * f2, np.float32)
assert_type(u2 * f4, np.float32)
assert_type(u2 * f8, np.float64)
assert_type(u2 * ld, np.longdouble)
assert_type(u2 * m8, np.timedelta64)

assert_type(u4 * u1, np.uint32)
assert_type(u4 * u2, np.uint32)
assert_type(u4 * u4, np.uint32)
assert_type(u4 * u8, np.uint64)
assert_type(u4 * i1, np.int64)
assert_type(u4 * i2, np.int64)
assert_type(u4 * i4, np.int64)
assert_type(u4 * i8, np.int64)
assert_type(u4 * f2, np.float64)
assert_type(u4 * f4, np.float64)
assert_type(u4 * f8, np.float64)
assert_type(u4 * ld, np.longdouble)
assert_type(u4 * m8, np.timedelta64)

assert_type(u8 * u1, np.uint64)
assert_type(u8 * u2, np.uint64)
assert_type(u8 * u4, np.uint64)
assert_type(u8 * u8, np.uint64)
assert_type(u8 * i1, np.float64)
assert_type(u8 * i2, np.float64)
assert_type(u8 * i4, np.float64)
assert_type(u8 * i8, np.float64)
assert_type(u8 * f2, np.float64)
assert_type(u8 * f4, np.float64)
assert_type(u8 * f8, np.float64)
assert_type(u8 * ld, np.longdouble)
assert_type(u8 * m8, np.timedelta64)

assert_type(i1 * u1, np.int16)
assert_type(i1 * u2, np.int32)
assert_type(i1 * u4, np.int64)
assert_type(i1 * u8, np.float64)
assert_type(i1 * i1, np.int8)
assert_type(i1 * i2, np.int16)
assert_type(i1 * i4, np.int32)
assert_type(i1 * i8, np.int64)
assert_type(i1 * f2, np.float16)
assert_type(i1 * f4, np.float32)
assert_type(i1 * f8, np.float64)
assert_type(i1 * ld, np.longdouble)
assert_type(i1 * m8, np.timedelta64)

assert_type(i2 * u1, np.int16)
assert_type(i2 * u2, np.int32)
assert_type(i2 * u4, np.int64)
assert_type(i2 * u8, np.float64)
assert_type(i2 * i1, np.int16)
assert_type(i2 * i2, np.int16)
assert_type(i2 * i4, np.int32)
assert_type(i2 * i8, np.int64)
assert_type(i2 * f2, np.float32)
assert_type(i2 * f4, np.float32)
assert_type(i2 * f8, np.float64)
assert_type(i2 * ld, np.longdouble)
assert_type(i2 * m8, np.timedelta64)

assert_type(i4 * u1, np.int32)
assert_type(i4 * u2, np.int32)
assert_type(i4 * u4, np.int64)
assert_type(i4 * u8, np.float64)
assert_type(i4 * i1, np.int32)
assert_type(i4 * i2, np.int32)
assert_type(i4 * i4, np.int32)
assert_type(i4 * i8, np.int64)
assert_type(i4 * f2, np.float64)
assert_type(i4 * f4, np.float64)
assert_type(i4 * f8, np.float64)
assert_type(i4 * ld, np.longdouble)
assert_type(i4 * m8, np.timedelta64)

assert_type(i8 * u1, np.int64)
assert_type(i8 * u2, np.int64)
assert_type(i8 * u4, np.int64)
assert_type(i8 * u8, np.float64)
assert_type(i8 * i1, np.int64)
assert_type(i8 * i2, np.int64)
assert_type(i8 * i4, np.int64)
assert_type(i8 * i8, np.int64)
assert_type(i8 * f2, np.float64)
assert_type(i8 * f4, np.float64)
assert_type(i8 * f8, np.float64)
assert_type(i8 * ld, np.longdouble)
assert_type(i8 * m8, np.timedelta64)

assert_type(f2 * u1, np.float16)
assert_type(f2 * u2, np.float32)
assert_type(f2 * u4, np.float64)
assert_type(f2 * u8, np.float64)
assert_type(f2 * i1, np.float16)
assert_type(f2 * i2, np.float32)
assert_type(f2 * i4, np.float64)
assert_type(f2 * i8, np.float64)
assert_type(f2 * f2, np.float16)
assert_type(f2 * f4, np.float32)
assert_type(f2 * f8, np.float64)
assert_type(f2 * ld, np.longdouble)
assert_type(f2 * m8, np.timedelta64)

assert_type(f4 * u1, np.float32)
assert_type(f4 * u2, np.float32)
assert_type(f4 * u4, np.float64)
assert_type(f4 * u8, np.float64)
assert_type(f4 * i1, np.float32)
assert_type(f4 * i2, np.float32)
assert_type(f4 * i4, np.float64)
assert_type(f4 * i8, np.float64)
assert_type(f4 * f2, np.float32)
assert_type(f4 * f4, np.float32)
assert_type(f4 * f8, np.float64)
assert_type(f4 * ld, np.longdouble)
assert_type(f4 * m8, np.timedelta64)

assert_type(f8 * u1, np.float64)
assert_type(f8 * u2, np.float64)
assert_type(f8 * u4, np.float64)
assert_type(f8 * u8, np.float64)
assert_type(f8 * i1, np.float64)
assert_type(f8 * i2, np.float64)
assert_type(f8 * i4, np.float64)
assert_type(f8 * i8, np.float64)
assert_type(f8 * f2, np.float64)
assert_type(f8 * f4, np.float64)
assert_type(f8 * f8, np.float64)
assert_type(f8 * ld, np.longdouble)
assert_type(f8 * m8, np.timedelta64)

assert_type(ld * u1, np.longdouble)
assert_type(ld * u2, np.longdouble)
assert_type(ld * u4, np.longdouble)
assert_type(ld * u8, np.longdouble)
assert_type(ld * i1, np.longdouble)
assert_type(ld * i2, np.longdouble)
assert_type(ld * i4, np.longdouble)
assert_type(ld * i8, np.longdouble)
assert_type(ld * f2, np.longdouble)
assert_type(ld * f4, np.longdouble)
assert_type(ld * f8, np.longdouble)
assert_type(ld * ld, np.longdouble)
assert_type(ld * m8, np.timedelta64)

assert_type(m8 * u1, np.timedelta64)
assert_type(m8 * u2, np.timedelta64)
assert_type(m8 * u4, np.timedelta64)
assert_type(m8 * u8, np.timedelta64)
assert_type(m8 * i1, np.timedelta64)
assert_type(m8 * i2, np.timedelta64)
assert_type(m8 * i4, np.timedelta64)
assert_type(m8 * i8, np.timedelta64)
assert_type(m8 * f2, np.timedelta64)
assert_type(m8 * f4, np.timedelta64)
assert_type(m8 * f8, np.timedelta64)
assert_type(m8 * ld, np.timedelta64)
m8 * m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

###
# __[r]pow__

assert_type(u1**u1, np.uint8)
assert_type(u1**u2, np.uint16)
assert_type(u1**u4, np.uint32)
assert_type(u1**u8, np.uint64)
assert_type(u1**i1, np.int16)
assert_type(u1**i2, np.int16)
assert_type(u1**i4, np.int32)
assert_type(u1**i8, np.int64)
assert_type(u1**f2, np.float16)
assert_type(u1**f4, np.float32)
assert_type(u1**f8, np.float64)
assert_type(u1**ld, np.longdouble)

assert_type(u2**u1, np.uint16)
assert_type(u2**u2, np.uint16)
assert_type(u2**u4, np.uint32)
assert_type(u2**u8, np.uint64)
assert_type(u2**i1, np.int32)
assert_type(u2**i2, np.int32)
assert_type(u2**i4, np.int32)
assert_type(u2**i8, np.int64)
assert_type(u2**f2, np.float32)
assert_type(u2**f4, np.float32)
assert_type(u2**f8, np.float64)
assert_type(u2**ld, np.longdouble)

assert_type(u4**u1, np.uint32)
assert_type(u4**u2, np.uint32)
assert_type(u4**u4, np.uint32)
assert_type(u4**u8, np.uint64)
assert_type(u4**i1, np.int64)
assert_type(u4**i2, np.int64)
assert_type(u4**i4, np.int64)
assert_type(u4**i8, np.int64)
assert_type(u4**f2, np.float64)
assert_type(u4**f4, np.float64)
assert_type(u4**f8, np.float64)
assert_type(u4**ld, np.longdouble)

assert_type(u8**u1, np.uint64)
assert_type(u8**u2, np.uint64)
assert_type(u8**u4, np.uint64)
assert_type(u8**u8, np.uint64)
assert_type(u8**i1, np.float64)
assert_type(u8**i2, np.float64)
assert_type(u8**i4, np.float64)
assert_type(u8**i8, np.float64)
assert_type(u8**f2, np.float64)
assert_type(u8**f4, np.float64)
assert_type(u8**f8, np.float64)
assert_type(u8**ld, np.longdouble)

assert_type(i1**u1, np.int16)
assert_type(i1**u2, np.int32)
assert_type(i1**u4, np.int64)
assert_type(i1**u8, np.float64)
assert_type(i1**i1, np.int8)
assert_type(i1**i2, np.int16)
assert_type(i1**i4, np.int32)
assert_type(i1**i8, np.int64)
assert_type(i1**f2, np.float16)
assert_type(i1**f4, np.float32)
assert_type(i1**f8, np.float64)
assert_type(i1**ld, np.longdouble)

assert_type(i2**u1, np.int16)
assert_type(i2**u2, np.int32)
assert_type(i2**u4, np.int64)
assert_type(i2**u8, np.float64)
assert_type(i2**i1, np.int16)
assert_type(i2**i2, np.int16)
assert_type(i2**i4, np.int32)
assert_type(i2**i8, np.int64)
assert_type(i2**f2, np.float32)
assert_type(i2**f4, np.float32)
assert_type(i2**f8, np.float64)
assert_type(i2**ld, np.longdouble)

assert_type(i4**u1, np.int32)
assert_type(i4**u2, np.int32)
assert_type(i4**u4, np.int64)
assert_type(i4**u8, np.float64)
assert_type(i4**i1, np.int32)
assert_type(i4**i2, np.int32)
assert_type(i4**i4, np.int32)
assert_type(i4**i8, np.int64)
assert_type(i4**f2, np.float64)
assert_type(i4**f4, np.float64)
assert_type(i4**f8, np.float64)
assert_type(i4**ld, np.longdouble)

assert_type(i8**u1, np.int64)
assert_type(i8**u2, np.int64)
assert_type(i8**u4, np.int64)
assert_type(i8**u8, np.float64)
assert_type(i8**i1, np.int64)
assert_type(i8**i2, np.int64)
assert_type(i8**i4, np.int64)
assert_type(i8**i8, np.int64)
assert_type(i8**f2, np.float64)
assert_type(i8**f4, np.float64)
assert_type(i8**f8, np.float64)
assert_type(i8**ld, np.longdouble)

assert_type(f2**u1, np.float16)
assert_type(f2**u2, np.float32)
assert_type(f2**u4, np.float64)
assert_type(f2**u8, np.float64)
assert_type(f2**i1, np.float16)
assert_type(f2**i2, np.float32)
assert_type(f2**i4, np.float64)
assert_type(f2**i8, np.float64)
assert_type(f2**f2, np.float16)
assert_type(f2**f4, np.float32)
assert_type(f2**f8, np.float64)
assert_type(f2**ld, np.longdouble)

assert_type(f4**u1, np.float32)
assert_type(f4**u2, np.float32)
assert_type(f4**u4, np.float64)
assert_type(f4**u8, np.float64)
assert_type(f4**i1, np.float32)
assert_type(f4**i2, np.float32)
assert_type(f4**i4, np.float64)
assert_type(f4**i8, np.float64)
assert_type(f4**f2, np.float32)
assert_type(f4**f4, np.float32)
assert_type(f4**f8, np.float64)
assert_type(f4**ld, np.longdouble)

assert_type(f8**u1, np.float64)
assert_type(f8**u2, np.float64)
assert_type(f8**u4, np.float64)
assert_type(f8**u8, np.float64)
assert_type(f8**i1, np.float64)
assert_type(f8**i2, np.float64)
assert_type(f8**i4, np.float64)
assert_type(f8**i8, np.float64)
assert_type(f8**f2, np.float64)
assert_type(f8**f4, np.float64)
assert_type(f8**f8, np.float64)
assert_type(f8**ld, np.longdouble)

assert_type(ld**u1, np.longdouble)
assert_type(ld**u2, np.longdouble)
assert_type(ld**u4, np.longdouble)
assert_type(ld**u8, np.longdouble)
assert_type(ld**i1, np.longdouble)
assert_type(ld**i2, np.longdouble)
assert_type(ld**i4, np.longdouble)
assert_type(ld**i8, np.longdouble)
assert_type(ld**f2, np.longdouble)
assert_type(ld**f4, np.longdouble)
assert_type(ld**f8, np.longdouble)
assert_type(ld**ld, np.longdouble)

###
# __[r]truediv__

assert_type(u1 / u1, np.float64)
assert_type(u1 / u2, np.float64)
assert_type(u1 / u4, np.float64)
assert_type(u1 / u8, np.float64)
assert_type(u1 / i1, np.float64)
assert_type(u1 / i2, np.float64)
assert_type(u1 / i4, np.float64)
assert_type(u1 / i8, np.float64)
assert_type(u1 / f2, np.float16)
assert_type(u1 / f4, np.float32)
assert_type(u1 / f8, np.float64)
assert_type(u1 / ld, np.longdouble)
u1 / m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(u2 / u1, np.float64)
assert_type(u2 / u2, np.float64)
assert_type(u2 / u4, np.float64)
assert_type(u2 / u8, np.float64)
assert_type(u2 / i1, np.float64)
assert_type(u2 / i2, np.float64)
assert_type(u2 / i4, np.float64)
assert_type(u2 / i8, np.float64)
assert_type(u2 / f2, np.float32)
assert_type(u2 / f4, np.float32)
assert_type(u2 / f8, np.float64)
assert_type(u2 / ld, np.longdouble)
u2 / m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(u4 / u1, np.float64)
assert_type(u4 / u2, np.float64)
assert_type(u4 / u4, np.float64)
assert_type(u4 / u8, np.float64)
assert_type(u4 / i1, np.float64)
assert_type(u4 / i2, np.float64)
assert_type(u4 / i4, np.float64)
assert_type(u4 / i8, np.float64)
assert_type(u4 / f2, np.float64)
assert_type(u4 / f4, np.float64)
assert_type(u4 / f8, np.float64)
assert_type(u4 / ld, np.longdouble)
u4 / m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(u8 / u1, np.float64)
assert_type(u8 / u2, np.float64)
assert_type(u8 / u4, np.float64)
assert_type(u8 / u8, np.float64)
assert_type(u8 / i1, np.float64)
assert_type(u8 / i2, np.float64)
assert_type(u8 / i4, np.float64)
assert_type(u8 / i8, np.float64)
assert_type(u8 / f2, np.float64)
assert_type(u8 / f4, np.float64)
assert_type(u8 / f8, np.float64)
assert_type(u8 / ld, np.longdouble)
u8 / m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(i1 / u1, np.float64)
assert_type(i1 / u2, np.float64)
assert_type(i1 / u4, np.float64)
assert_type(i1 / u8, np.float64)
assert_type(i1 / i1, np.float64)
assert_type(i1 / i2, np.float64)
assert_type(i1 / i4, np.float64)
assert_type(i1 / i8, np.float64)
assert_type(i1 / f2, np.float16)
assert_type(i1 / f4, np.float32)
assert_type(i1 / f8, np.float64)
assert_type(i1 / ld, np.longdouble)
i1 / m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(i2 / u1, np.float64)
assert_type(i2 / u2, np.float64)
assert_type(i2 / u4, np.float64)
assert_type(i2 / u8, np.float64)
assert_type(i2 / i1, np.float64)
assert_type(i2 / i2, np.float64)
assert_type(i2 / i4, np.float64)
assert_type(i2 / i8, np.float64)
assert_type(i2 / f2, np.float32)
assert_type(i2 / f4, np.float32)
assert_type(i2 / f8, np.float64)
assert_type(i2 / ld, np.longdouble)
i2 / m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(i4 / u1, np.float64)
assert_type(i4 / u2, np.float64)
assert_type(i4 / u4, np.float64)
assert_type(i4 / u8, np.float64)
assert_type(i4 / i1, np.float64)
assert_type(i4 / i2, np.float64)
assert_type(i4 / i4, np.float64)
assert_type(i4 / i8, np.float64)
assert_type(i4 / f2, np.float64)
assert_type(i4 / f4, np.float64)
assert_type(i4 / f8, np.float64)
assert_type(i4 / ld, np.longdouble)
i4 / m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(i8 / u1, np.float64)
assert_type(i8 / u2, np.float64)
assert_type(i8 / u4, np.float64)
assert_type(i8 / u8, np.float64)
assert_type(i8 / i1, np.float64)
assert_type(i8 / i2, np.float64)
assert_type(i8 / i4, np.float64)
assert_type(i8 / i8, np.float64)
assert_type(i8 / f2, np.float64)
assert_type(i8 / f4, np.float64)
assert_type(i8 / f8, np.float64)
assert_type(i8 / ld, np.longdouble)
i8 / m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(f2 / u1, np.float16)
assert_type(f2 / u2, np.float32)
assert_type(f2 / u4, np.float64)
assert_type(f2 / u8, np.float64)
assert_type(f2 / i1, np.float16)
assert_type(f2 / i2, np.float32)
assert_type(f2 / i4, np.float64)
assert_type(f2 / i8, np.float64)
assert_type(f2 / f2, np.float16)
assert_type(f2 / f4, np.float32)
assert_type(f2 / f8, np.float64)
assert_type(f2 / ld, np.longdouble)
f2 / m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(f4 / u1, np.float32)
assert_type(f4 / u2, np.float32)
assert_type(f4 / u4, np.float64)
assert_type(f4 / u8, np.float64)
assert_type(f4 / i1, np.float32)
assert_type(f4 / i2, np.float32)
assert_type(f4 / i4, np.float64)
assert_type(f4 / i8, np.float64)
assert_type(f4 / f2, np.float32)
assert_type(f4 / f4, np.float32)
assert_type(f4 / f8, np.float64)
assert_type(f4 / ld, np.longdouble)
f4 / m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(f8 / u1, np.float64)
assert_type(f8 / u2, np.float64)
assert_type(f8 / u4, np.float64)
assert_type(f8 / u8, np.float64)
assert_type(f8 / i1, np.float64)
assert_type(f8 / i2, np.float64)
assert_type(f8 / i4, np.float64)
assert_type(f8 / i8, np.float64)
assert_type(f8 / f2, np.float64)
assert_type(f8 / f4, np.float64)
assert_type(f8 / f8, np.float64)
assert_type(f8 / ld, np.longdouble)
f8 / m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(ld / u1, np.longdouble)
assert_type(ld / u2, np.longdouble)
assert_type(ld / u4, np.longdouble)
assert_type(ld / u8, np.longdouble)
assert_type(ld / i1, np.longdouble)
assert_type(ld / i2, np.longdouble)
assert_type(ld / i4, np.longdouble)
assert_type(ld / i8, np.longdouble)
assert_type(ld / f2, np.longdouble)
assert_type(ld / f4, np.longdouble)
assert_type(ld / f8, np.longdouble)
assert_type(ld / ld, np.longdouble)
ld / m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(m8 / u1, np.timedelta64)
assert_type(m8 / u2, np.timedelta64)
assert_type(m8 / u4, np.timedelta64)
assert_type(m8 / u8, np.timedelta64)
assert_type(m8 / i1, np.timedelta64)
assert_type(m8 / i2, np.timedelta64)
assert_type(m8 / i4, np.timedelta64)
assert_type(m8 / i8, np.timedelta64)
assert_type(m8 / f2, np.timedelta64)
assert_type(m8 / f4, np.timedelta64)
assert_type(m8 / f8, np.timedelta64)
assert_type(m8 / ld, np.timedelta64)
assert_type(m8 / m8, np.float64)

###
# __[r]floordiv__

assert_type(u1 // u1, np.uint8)
assert_type(u1 // u2, np.uint16)
assert_type(u1 // u4, np.uint32)
assert_type(u1 // u8, np.uint64)
assert_type(u1 // i1, np.int16)
assert_type(u1 // i2, np.int16)
assert_type(u1 // i4, np.int32)
assert_type(u1 // i8, np.int64)
assert_type(u1 // f2, np.float16)
assert_type(u1 // f4, np.float32)
assert_type(u1 // f8, np.float64)
assert_type(u1 // ld, np.longdouble)
u1 // m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(u2 // u1, np.uint16)
assert_type(u2 // u2, np.uint16)
assert_type(u2 // u4, np.uint32)
assert_type(u2 // u8, np.uint64)
assert_type(u2 // i1, np.int32)
assert_type(u2 // i2, np.int32)
assert_type(u2 // i4, np.int32)
assert_type(u2 // i8, np.int64)
assert_type(u2 // f2, np.float32)
assert_type(u2 // f4, np.float32)
assert_type(u2 // f8, np.float64)
assert_type(u2 // ld, np.longdouble)
u2 // m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(u4 // u1, np.uint32)
assert_type(u4 // u2, np.uint32)
assert_type(u4 // u4, np.uint32)
assert_type(u4 // u8, np.uint64)
assert_type(u4 // i1, np.int64)
assert_type(u4 // i2, np.int64)
assert_type(u4 // i4, np.int64)
assert_type(u4 // i8, np.int64)
assert_type(u4 // f2, np.float64)
assert_type(u4 // f4, np.float64)
assert_type(u4 // f8, np.float64)
assert_type(u4 // ld, np.longdouble)
u4 // m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(u8 // u1, np.uint64)
assert_type(u8 // u2, np.uint64)
assert_type(u8 // u4, np.uint64)
assert_type(u8 // u8, np.uint64)
assert_type(u8 // i1, np.float64)
assert_type(u8 // i2, np.float64)
assert_type(u8 // i4, np.float64)
assert_type(u8 // i8, np.float64)
assert_type(u8 // f2, np.float64)
assert_type(u8 // f4, np.float64)
assert_type(u8 // f8, np.float64)
assert_type(u8 // ld, np.longdouble)
u8 // m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(i1 // u1, np.int16)
assert_type(i1 // u2, np.int32)
assert_type(i1 // u4, np.int64)
assert_type(i1 // u8, np.float64)
assert_type(i1 // i1, np.int8)
assert_type(i1 // i2, np.int16)
assert_type(i1 // i4, np.int32)
assert_type(i1 // i8, np.int64)
assert_type(i1 // f2, np.float16)
assert_type(i1 // f4, np.float32)
assert_type(i1 // f8, np.float64)
assert_type(i1 // ld, np.longdouble)
i1 // m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(i2 // u1, np.int16)
assert_type(i2 // u2, np.int32)
assert_type(i2 // u4, np.int64)
assert_type(i2 // u8, np.float64)
assert_type(i2 // i1, np.int16)
assert_type(i2 // i2, np.int16)
assert_type(i2 // i4, np.int32)
assert_type(i2 // i8, np.int64)
assert_type(i2 // f2, np.float32)
assert_type(i2 // f4, np.float32)
assert_type(i2 // f8, np.float64)
assert_type(i2 // ld, np.longdouble)
i2 // m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(i4 // u1, np.int32)
assert_type(i4 // u2, np.int32)
assert_type(i4 // u4, np.int64)
assert_type(i4 // u8, np.float64)
assert_type(i4 // i1, np.int32)
assert_type(i4 // i2, np.int32)
assert_type(i4 // i4, np.int32)
assert_type(i4 // i8, np.int64)
assert_type(i4 // f2, np.float64)
assert_type(i4 // f4, np.float64)
assert_type(i4 // f8, np.float64)
assert_type(i4 // ld, np.longdouble)
i4 // m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(i8 // u1, np.int64)
assert_type(i8 // u2, np.int64)
assert_type(i8 // u4, np.int64)
assert_type(i8 // u8, np.float64)
assert_type(i8 // i1, np.int64)
assert_type(i8 // i2, np.int64)
assert_type(i8 // i4, np.int64)
assert_type(i8 // i8, np.int64)
assert_type(i8 // f2, np.float64)
assert_type(i8 // f4, np.float64)
assert_type(i8 // f8, np.float64)
assert_type(i8 // ld, np.longdouble)
i8 // m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(f2 // u1, np.float16)
assert_type(f2 // u2, np.float32)
assert_type(f2 // u4, np.float64)
assert_type(f2 // u8, np.float64)
assert_type(f2 // i1, np.float16)
assert_type(f2 // i2, np.float32)
assert_type(f2 // i4, np.float64)
assert_type(f2 // i8, np.float64)
assert_type(f2 // f2, np.float16)
assert_type(f2 // f4, np.float32)
assert_type(f2 // f8, np.float64)
assert_type(f2 // ld, np.longdouble)
f2 // m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(f4 // u1, np.float32)
assert_type(f4 // u2, np.float32)
assert_type(f4 // u4, np.float64)
assert_type(f4 // u8, np.float64)
assert_type(f4 // i1, np.float32)
assert_type(f4 // i2, np.float32)
assert_type(f4 // i4, np.float64)
assert_type(f4 // i8, np.float64)
assert_type(f4 // f2, np.float32)
assert_type(f4 // f4, np.float32)
assert_type(f4 // f8, np.float64)
assert_type(f4 // ld, np.longdouble)
f4 // m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(f8 // u1, np.float64)
assert_type(f8 // u2, np.float64)
assert_type(f8 // u4, np.float64)
assert_type(f8 // u8, np.float64)
assert_type(f8 // i1, np.float64)
assert_type(f8 // i2, np.float64)
assert_type(f8 // i4, np.float64)
assert_type(f8 // i8, np.float64)
assert_type(f8 // f2, np.float64)
assert_type(f8 // f4, np.float64)
assert_type(f8 // f8, np.float64)
assert_type(f8 // ld, np.longdouble)
f8 // m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(ld // u1, np.longdouble)
assert_type(ld // u2, np.longdouble)
assert_type(ld // u4, np.longdouble)
assert_type(ld // u8, np.longdouble)
assert_type(ld // i1, np.longdouble)
assert_type(ld // i2, np.longdouble)
assert_type(ld // i4, np.longdouble)
assert_type(ld // i8, np.longdouble)
assert_type(ld // f2, np.longdouble)
assert_type(ld // f4, np.longdouble)
assert_type(ld // f8, np.longdouble)
assert_type(ld // ld, np.longdouble)
ld // m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(m8 // u1, np.timedelta64)
assert_type(m8 // u2, np.timedelta64)
assert_type(m8 // u4, np.timedelta64)
assert_type(m8 // u8, np.timedelta64)
assert_type(m8 // i1, np.timedelta64)
assert_type(m8 // i2, np.timedelta64)
assert_type(m8 // i4, np.timedelta64)
assert_type(m8 // i8, np.timedelta64)
assert_type(m8 // f2, np.timedelta64)
assert_type(m8 // f4, np.timedelta64)
assert_type(m8 // f8, np.timedelta64)
assert_type(m8 // ld, np.timedelta64)
assert_type(m8 // m8, np.longlong)

###
# __[r]mod__

assert_type(u1 % u1, np.uint8)
assert_type(u1 % u2, np.uint16)
assert_type(u1 % u4, np.uint32)
assert_type(u1 % u8, np.uint64)
assert_type(u1 % i1, np.int16)
assert_type(u1 % i2, np.int16)
assert_type(u1 % i4, np.int32)
assert_type(u1 % i8, np.int64)
assert_type(u1 % f2, np.float16)
assert_type(u1 % f4, np.float32)
assert_type(u1 % f8, np.float64)
assert_type(u1 % ld, np.longdouble)
u1 % m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(u2 % u1, np.uint16)
assert_type(u2 % u2, np.uint16)
assert_type(u2 % u4, np.uint32)
assert_type(u2 % u8, np.uint64)
assert_type(u2 % i1, np.int32)
assert_type(u2 % i2, np.int32)
assert_type(u2 % i4, np.int32)
assert_type(u2 % i8, np.int64)
assert_type(u2 % f2, np.float32)
assert_type(u2 % f4, np.float32)
assert_type(u2 % f8, np.float64)
assert_type(u2 % ld, np.longdouble)
u2 % m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(u4 % u1, np.uint32)
assert_type(u4 % u2, np.uint32)
assert_type(u4 % u4, np.uint32)
assert_type(u4 % u8, np.uint64)
assert_type(u4 % i1, np.int64)
assert_type(u4 % i2, np.int64)
assert_type(u4 % i4, np.int64)
assert_type(u4 % i8, np.int64)
assert_type(u4 % f2, np.float64)
assert_type(u4 % f4, np.float64)
assert_type(u4 % f8, np.float64)
assert_type(u4 % ld, np.longdouble)
u4 % m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(u8 % u1, np.uint64)
assert_type(u8 % u2, np.uint64)
assert_type(u8 % u4, np.uint64)
assert_type(u8 % u8, np.uint64)
assert_type(u8 % i1, np.float64)
assert_type(u8 % i2, np.float64)
assert_type(u8 % i4, np.float64)
assert_type(u8 % i8, np.float64)
assert_type(u8 % f2, np.float64)
assert_type(u8 % f4, np.float64)
assert_type(u8 % f8, np.float64)
assert_type(u8 % ld, np.longdouble)
u8 % m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(i1 % u1, np.int16)
assert_type(i1 % u2, np.int32)
assert_type(i1 % u4, np.int64)
assert_type(i1 % u8, np.float64)
assert_type(i1 % i1, np.int8)
assert_type(i1 % i2, np.int16)
assert_type(i1 % i4, np.int32)
assert_type(i1 % i8, np.int64)
assert_type(i1 % f2, np.float16)
assert_type(i1 % f4, np.float32)
assert_type(i1 % f8, np.float64)
assert_type(i1 % ld, np.longdouble)
i1 % m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(i2 % u1, np.int16)
assert_type(i2 % u2, np.int32)
assert_type(i2 % u4, np.int64)
assert_type(i2 % u8, np.float64)
assert_type(i2 % i1, np.int16)
assert_type(i2 % i2, np.int16)
assert_type(i2 % i4, np.int32)
assert_type(i2 % i8, np.int64)
assert_type(i2 % f2, np.float32)
assert_type(i2 % f4, np.float32)
assert_type(i2 % f8, np.float64)
assert_type(i2 % ld, np.longdouble)
i2 % m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(i4 % u1, np.int32)
assert_type(i4 % u2, np.int32)
assert_type(i4 % u4, np.int64)
assert_type(i4 % u8, np.float64)
assert_type(i4 % i1, np.int32)
assert_type(i4 % i2, np.int32)
assert_type(i4 % i4, np.int32)
assert_type(i4 % i8, np.int64)
assert_type(i4 % f2, np.float64)
assert_type(i4 % f4, np.float64)
assert_type(i4 % f8, np.float64)
assert_type(i4 % ld, np.longdouble)
i4 % m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(i8 % u1, np.int64)
assert_type(i8 % u2, np.int64)
assert_type(i8 % u4, np.int64)
assert_type(i8 % u8, np.float64)
assert_type(i8 % i1, np.int64)
assert_type(i8 % i2, np.int64)
assert_type(i8 % i4, np.int64)
assert_type(i8 % i8, np.int64)
assert_type(i8 % f2, np.float64)
assert_type(i8 % f4, np.float64)
assert_type(i8 % f8, np.float64)
assert_type(i8 % ld, np.longdouble)
i8 % m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(f2 % u1, np.float16)
assert_type(f2 % u2, np.float32)
assert_type(f2 % u4, np.float64)
assert_type(f2 % u8, np.float64)
assert_type(f2 % i1, np.float16)
assert_type(f2 % i2, np.float32)
assert_type(f2 % i4, np.float64)
assert_type(f2 % i8, np.float64)
assert_type(f2 % f2, np.float16)
assert_type(f2 % f4, np.float32)
assert_type(f2 % f8, np.float64)
assert_type(f2 % ld, np.longdouble)
f2 % m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(f4 % u1, np.float32)
assert_type(f4 % u2, np.float32)
assert_type(f4 % u4, np.float64)
assert_type(f4 % u8, np.float64)
assert_type(f4 % i1, np.float32)
assert_type(f4 % i2, np.float32)
assert_type(f4 % i4, np.float64)
assert_type(f4 % i8, np.float64)
assert_type(f4 % f2, np.float32)
assert_type(f4 % f4, np.float32)
assert_type(f4 % f8, np.float64)
assert_type(f4 % ld, np.longdouble)
f4 % m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(f8 % u1, np.float64)
assert_type(f8 % u2, np.float64)
assert_type(f8 % u4, np.float64)
assert_type(f8 % u8, np.float64)
assert_type(f8 % i1, np.float64)
assert_type(f8 % i2, np.float64)
assert_type(f8 % i4, np.float64)
assert_type(f8 % i8, np.float64)
assert_type(f8 % f2, np.float64)
assert_type(f8 % f4, np.float64)
assert_type(f8 % f8, np.float64)
assert_type(f8 % ld, np.longdouble)
f8 % m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(ld % u1, np.longdouble)
assert_type(ld % u2, np.longdouble)
assert_type(ld % u4, np.longdouble)
assert_type(ld % u8, np.longdouble)
assert_type(ld % i1, np.longdouble)
assert_type(ld % i2, np.longdouble)
assert_type(ld % i4, np.longdouble)
assert_type(ld % i8, np.longdouble)
assert_type(ld % f2, np.longdouble)
assert_type(ld % f4, np.longdouble)
assert_type(ld % f8, np.longdouble)
assert_type(ld % ld, np.longdouble)
ld % m8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

m8 % u1  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
m8 % u2  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
m8 % u4  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
m8 % u8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
m8 % i1  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
m8 % i2  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
m8 % i4  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
m8 % i8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
m8 % f2  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
m8 % f4  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
m8 % f8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
m8 % ld  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
assert_type(m8 % m8, np.timedelta64)

###
# __[r]lshift__

assert_type(u1 << u1, np.uint8)
assert_type(u1 << u2, np.uint16)
assert_type(u1 << u4, np.uint32)
assert_type(u1 << u8, np.uint64)
assert_type(u1 << i1, np.int16)
assert_type(u1 << i2, np.int16)
assert_type(u1 << i4, np.int32)
assert_type(u1 << i8, np.int64)

assert_type(u2 << u1, np.uint16)
assert_type(u2 << u2, np.uint16)
assert_type(u2 << u4, np.uint32)
assert_type(u2 << u8, np.uint64)
assert_type(u2 << i1, np.int32)
assert_type(u2 << i2, np.int32)
assert_type(u2 << i4, np.int32)
assert_type(u2 << i8, np.int64)

assert_type(u4 << u1, np.uint32)
assert_type(u4 << u2, np.uint32)
assert_type(u4 << u4, np.uint32)
assert_type(u4 << u8, np.uint64)
assert_type(u4 << i1, np.int64)
assert_type(u4 << i2, np.int64)
assert_type(u4 << i4, np.int64)
assert_type(u4 << i8, np.int64)

assert_type(u8 << u1, np.uint64)
assert_type(u8 << u2, np.uint64)
assert_type(u8 << u4, np.uint64)
assert_type(u8 << u8, np.uint64)
u8 << i1  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
u8 << i2  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
u8 << i4  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
u8 << i8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(i1 << u1, np.int16)
assert_type(i1 << u2, np.int32)
assert_type(i1 << u4, np.int64)
i1 << u8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
assert_type(i1 << i1, np.int8)
assert_type(i1 << i2, np.int16)
assert_type(i1 << i4, np.int32)
assert_type(i1 << i8, np.int64)

assert_type(i2 << u1, np.int16)
assert_type(i2 << u2, np.int32)
assert_type(i2 << u4, np.int64)
i2 << u8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
assert_type(i2 << i1, np.int16)
assert_type(i2 << i2, np.int16)
assert_type(i2 << i4, np.int32)
assert_type(i2 << i8, np.int64)

assert_type(i4 << u1, np.int32)
assert_type(i4 << u2, np.int32)
assert_type(i4 << u4, np.int64)
i4 << u8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
assert_type(i4 << i1, np.int32)
assert_type(i4 << i2, np.int32)
assert_type(i4 << i4, np.int32)
assert_type(i4 << i8, np.int64)

assert_type(i8 << u1, np.int64)
assert_type(i8 << u2, np.int64)
assert_type(i8 << u4, np.int64)
i8 << u8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
assert_type(i8 << i1, np.int64)
assert_type(i8 << i2, np.int64)
assert_type(i8 << i4, np.int64)
assert_type(i8 << i8, np.int64)

###
# __[r]rshift__

assert_type(u1 >> u1, np.uint8)
assert_type(u1 >> u2, np.uint16)
assert_type(u1 >> u4, np.uint32)
assert_type(u1 >> u8, np.uint64)
assert_type(u1 >> i1, np.int16)
assert_type(u1 >> i2, np.int16)
assert_type(u1 >> i4, np.int32)
assert_type(u1 >> i8, np.int64)

assert_type(u2 >> u1, np.uint16)
assert_type(u2 >> u2, np.uint16)
assert_type(u2 >> u4, np.uint32)
assert_type(u2 >> u8, np.uint64)
assert_type(u2 >> i1, np.int32)
assert_type(u2 >> i2, np.int32)
assert_type(u2 >> i4, np.int32)
assert_type(u2 >> i8, np.int64)

assert_type(u4 >> u1, np.uint32)
assert_type(u4 >> u2, np.uint32)
assert_type(u4 >> u4, np.uint32)
assert_type(u4 >> u8, np.uint64)
assert_type(u4 >> i1, np.int64)
assert_type(u4 >> i2, np.int64)
assert_type(u4 >> i4, np.int64)
assert_type(u4 >> i8, np.int64)

assert_type(u8 >> u1, np.uint64)
assert_type(u8 >> u2, np.uint64)
assert_type(u8 >> u4, np.uint64)
assert_type(u8 >> u8, np.uint64)
u8 >> i1  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
u8 >> i2  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
u8 >> i4  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
u8 >> i8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(i1 >> u1, np.int16)
assert_type(i1 >> u2, np.int32)
assert_type(i1 >> u4, np.int64)
i1 >> u8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
assert_type(i1 >> i1, np.int8)
assert_type(i1 >> i2, np.int16)
assert_type(i1 >> i4, np.int32)
assert_type(i1 >> i8, np.int64)

assert_type(i2 >> u1, np.int16)
assert_type(i2 >> u2, np.int32)
assert_type(i2 >> u4, np.int64)
i2 >> u8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
assert_type(i2 >> i1, np.int16)
assert_type(i2 >> i2, np.int16)
assert_type(i2 >> i4, np.int32)
assert_type(i2 >> i8, np.int64)

assert_type(i4 >> u1, np.int32)
assert_type(i4 >> u2, np.int32)
assert_type(i4 >> u4, np.int64)
i4 >> u8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
assert_type(i4 >> i1, np.int32)
assert_type(i4 >> i2, np.int32)
assert_type(i4 >> i4, np.int32)
assert_type(i4 >> i8, np.int64)

assert_type(i8 >> u1, np.int64)
assert_type(i8 >> u2, np.int64)
assert_type(i8 >> u4, np.int64)
i8 >> u8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
assert_type(i8 >> i1, np.int64)
assert_type(i8 >> i2, np.int64)
assert_type(i8 >> i4, np.int64)
assert_type(i8 >> i8, np.int64)

###
# __[r]and__

assert_type(u1 & u1, np.uint8)
assert_type(u1 & u2, np.uint16)
assert_type(u1 & u4, np.uint32)
assert_type(u1 & u8, np.uint64)
assert_type(u1 & i1, np.int16)
assert_type(u1 & i2, np.int16)
assert_type(u1 & i4, np.int32)
assert_type(u1 & i8, np.int64)

assert_type(u2 & u1, np.uint16)
assert_type(u2 & u2, np.uint16)
assert_type(u2 & u4, np.uint32)
assert_type(u2 & u8, np.uint64)
assert_type(u2 & i1, np.int32)
assert_type(u2 & i2, np.int32)
assert_type(u2 & i4, np.int32)
assert_type(u2 & i8, np.int64)

assert_type(u4 & u1, np.uint32)
assert_type(u4 & u2, np.uint32)
assert_type(u4 & u4, np.uint32)
assert_type(u4 & u8, np.uint64)
assert_type(u4 & i1, np.int64)
assert_type(u4 & i2, np.int64)
assert_type(u4 & i4, np.int64)
assert_type(u4 & i8, np.int64)

assert_type(u8 & u1, np.uint64)
assert_type(u8 & u2, np.uint64)
assert_type(u8 & u4, np.uint64)
assert_type(u8 & u8, np.uint64)
u8 & i1  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
u8 & i2  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
u8 & i4  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
u8 & i8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(i1 & u1, np.int16)
assert_type(i1 & u2, np.int32)
assert_type(i1 & u4, np.int64)
i1 & u8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
assert_type(i1 & i1, np.int8)
assert_type(i1 & i2, np.int16)
assert_type(i1 & i4, np.int32)
assert_type(i1 & i8, np.int64)

assert_type(i2 & u1, np.int16)
assert_type(i2 & u2, np.int32)
assert_type(i2 & u4, np.int64)
i2 & u8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
assert_type(i2 & i1, np.int16)
assert_type(i2 & i2, np.int16)
assert_type(i2 & i4, np.int32)
assert_type(i2 & i8, np.int64)

assert_type(i4 & u1, np.int32)
assert_type(i4 & u2, np.int32)
assert_type(i4 & u4, np.int64)
i4 & u8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
assert_type(i4 & i1, np.int32)
assert_type(i4 & i2, np.int32)
assert_type(i4 & i4, np.int32)
assert_type(i4 & i8, np.int64)

assert_type(i8 & u1, np.int64)
assert_type(i8 & u2, np.int64)
assert_type(i8 & u4, np.int64)
i8 & u8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
assert_type(i8 & i1, np.int64)
assert_type(i8 & i2, np.int64)
assert_type(i8 & i4, np.int64)
assert_type(i8 & i8, np.int64)

###
# __[r]xor__

assert_type(u1 ^ u1, np.uint8)
assert_type(u1 ^ u2, np.uint16)
assert_type(u1 ^ u4, np.uint32)
assert_type(u1 ^ u8, np.uint64)
assert_type(u1 ^ i1, np.int16)
assert_type(u1 ^ i2, np.int16)
assert_type(u1 ^ i4, np.int32)
assert_type(u1 ^ i8, np.int64)

assert_type(u2 ^ u1, np.uint16)
assert_type(u2 ^ u2, np.uint16)
assert_type(u2 ^ u4, np.uint32)
assert_type(u2 ^ u8, np.uint64)
assert_type(u2 ^ i1, np.int32)
assert_type(u2 ^ i2, np.int32)
assert_type(u2 ^ i4, np.int32)
assert_type(u2 ^ i8, np.int64)

assert_type(u4 ^ u1, np.uint32)
assert_type(u4 ^ u2, np.uint32)
assert_type(u4 ^ u4, np.uint32)
assert_type(u4 ^ u8, np.uint64)
assert_type(u4 ^ i1, np.int64)
assert_type(u4 ^ i2, np.int64)
assert_type(u4 ^ i4, np.int64)
assert_type(u4 ^ i8, np.int64)

assert_type(u8 ^ u1, np.uint64)
assert_type(u8 ^ u2, np.uint64)
assert_type(u8 ^ u4, np.uint64)
assert_type(u8 ^ u8, np.uint64)
u8 ^ i1  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
u8 ^ i2  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
u8 ^ i4  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
u8 ^ i8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(i1 ^ u1, np.int16)
assert_type(i1 ^ u2, np.int32)
assert_type(i1 ^ u4, np.int64)
i1 ^ u8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
assert_type(i1 ^ i1, np.int8)
assert_type(i1 ^ i2, np.int16)
assert_type(i1 ^ i4, np.int32)
assert_type(i1 ^ i8, np.int64)

assert_type(i2 ^ u1, np.int16)
assert_type(i2 ^ u2, np.int32)
assert_type(i2 ^ u4, np.int64)
i2 ^ u8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
assert_type(i2 ^ i1, np.int16)
assert_type(i2 ^ i2, np.int16)
assert_type(i2 ^ i4, np.int32)
assert_type(i2 ^ i8, np.int64)

assert_type(i4 ^ u1, np.int32)
assert_type(i4 ^ u2, np.int32)
assert_type(i4 ^ u4, np.int64)
i4 ^ u8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
assert_type(i4 ^ i1, np.int32)
assert_type(i4 ^ i2, np.int32)
assert_type(i4 ^ i4, np.int32)
assert_type(i4 ^ i8, np.int64)

assert_type(i8 ^ u1, np.int64)
assert_type(i8 ^ u2, np.int64)
assert_type(i8 ^ u4, np.int64)
i8 ^ u8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
assert_type(i8 ^ i1, np.int64)
assert_type(i8 ^ i2, np.int64)
assert_type(i8 ^ i4, np.int64)
assert_type(i8 ^ i8, np.int64)

###
# __[r]or__

assert_type(u1 | u1, np.uint8)
assert_type(u1 | u2, np.uint16)
assert_type(u1 | u4, np.uint32)
assert_type(u1 | u8, np.uint64)
assert_type(u1 | i1, np.int16)
assert_type(u1 | i2, np.int16)
assert_type(u1 | i4, np.int32)
assert_type(u1 | i8, np.int64)

assert_type(u2 | u1, np.uint16)
assert_type(u2 | u2, np.uint16)
assert_type(u2 | u4, np.uint32)
assert_type(u2 | u8, np.uint64)
assert_type(u2 | i1, np.int32)
assert_type(u2 | i2, np.int32)
assert_type(u2 | i4, np.int32)
assert_type(u2 | i8, np.int64)

assert_type(u4 | u1, np.uint32)
assert_type(u4 | u2, np.uint32)
assert_type(u4 | u4, np.uint32)
assert_type(u4 | u8, np.uint64)
assert_type(u4 | i1, np.int64)
assert_type(u4 | i2, np.int64)
assert_type(u4 | i4, np.int64)
assert_type(u4 | i8, np.int64)

assert_type(u8 | u1, np.uint64)
assert_type(u8 | u2, np.uint64)
assert_type(u8 | u4, np.uint64)
assert_type(u8 | u8, np.uint64)
u8 | i1  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
u8 | i2  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
u8 | i4  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
u8 | i8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]

assert_type(i1 | u1, np.int16)
assert_type(i1 | u2, np.int32)
assert_type(i1 | u4, np.int64)
i1 | u8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
assert_type(i1 | i1, np.int8)
assert_type(i1 | i2, np.int16)
assert_type(i1 | i4, np.int32)
assert_type(i1 | i8, np.int64)

assert_type(i2 | u1, np.int16)
assert_type(i2 | u2, np.int32)
assert_type(i2 | u4, np.int64)
i2 | u8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
assert_type(i2 | i1, np.int16)
assert_type(i2 | i2, np.int16)
assert_type(i2 | i4, np.int32)
assert_type(i2 | i8, np.int64)

assert_type(i4 | u1, np.int32)
assert_type(i4 | u2, np.int32)
assert_type(i4 | u4, np.int64)
i4 | u8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
assert_type(i4 | i1, np.int32)
assert_type(i4 | i2, np.int32)
assert_type(i4 | i4, np.int32)
assert_type(i4 | i8, np.int64)

assert_type(i8 | u1, np.int64)
assert_type(i8 | u2, np.int64)
assert_type(i8 | u4, np.int64)
i8 | u8  # type: ignore[operator]  # pyright: ignore[reportOperatorIssue]
assert_type(i8 | i1, np.int64)
assert_type(i8 | i2, np.int64)
assert_type(i8 | i4, np.int64)
assert_type(i8 | i8, np.int64)
